#+TITLE: Storviks Emacs Configurations
#+AUTHOR: Petter S. Storvik
#+EMAIL: petterstorvik@gmail.com
#+STARTUP: overview
#+PROPERTY: header-args:elisp :lexical t
#+PROPERTY: header-args       :results silent

* Personal information
Add name and E-mail.

#+begin_src emacs-lisp
  (setq user-full-name "Petter S. Storvik"
        user-mail-address "petterstorvik@gmail.com")
#+end_src

* General settings

#+begin_src emacs-lisp
  ;; Avoid "warning" buffer pop-ups on native compile
  (setq native-comp-async-report-warnings-errors 'silent)
#+end_src

** System type
Macro for setting different settings for OSX / Linux.
[[https://gist.github.com/beyeran/4118401][Thanks to beyeran]].

#+begin_src emacs-lisp
  (setq sys-unix-p (or (eq system-type 'gnu/linux)
                       (eq system-type 'darwin)))

  (defun sys-type-p (name)
    (eq system-type name))

  (defmacro sys-diversification (gnu/linux &optional darwin win)
     (cond ((sys-type-p 'gnu/linux) gnu/linux)
           ((sys-type-p 'darwin) darwin)
           ((sys-type-p 'windows-nt) win)
           (t nil)))
#+end_src

** Initial settings
Configure load-path to include =~/.emacs.d/elisp/=.

#+begin_src emacs-lisp
  (add-to-list 'load-path (concat user-emacs-directory "elisp/"))
#+end_src

** Custom after gui hook
- source :: https://www.reddit.com/r/emacs/comments/j2xezg/usepackage_best_practices/

Now I can =:after storvik/gui= to make sure to load packages after gui is loaded, useful when running as daemon.
In order to run custom elisp after GUI is loaded it's possible to =(with-eval-after-load 'storvik/gui (...))= or with use-package =(use-package emacs :after storvik/gui :config (...))=.
When =with-eval-after-load= is used from =use-package= it should be placed in =:init=.

#+begin_src emacs-lisp
  (defun storvik/first-graphical-frame-hook-function ()
    (remove-hook 'focus-in-hook #'storvik/first-graphical-frame-hook-function)
    (provide 'storvik/gui))
  (add-hook 'focus-in-hook #'storvik/first-graphical-frame-hook-function)
#+end_src

** Coding system
Set coding system before doing anything.
This is taken from [[https://www.masteringemacs.org/article/working-coding-systems-unicode-emacs][MasteringEmacs]] website.

#+begin_src emacs-lisp
  (prefer-coding-system 'utf-8-unix)
  (set-default-coding-systems 'utf-8-unix)
  (set-terminal-coding-system 'utf-8-unix)
  (set-keyboard-coding-system 'utf-8-unix)
#+end_src

** Backup
Change backup location to common dir, =~/.emacs.saves= in emacs directory.

#+begin_src emacs-lisp
  (setq backup-directory-alist
        `((".*" . ,(concat user-emacs-directory "emacs.saves/"))))
  (setq auto-save-file-name-transforms
        `((".*" ,(concat user-emacs-directory "emacs.saves/") t)))
 #+end_src

** [[https://github.com/purcell/exec-path-from-shell][Exec path from shell]]
Use exec-path-from-shell on unix computers.

#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :when sys-unix-p
    :init
    (exec-path-from-shell-initialize))
#+end_src

** Newline
Add newline to end of files.

#+begin_src emacs-lisp
  (setq require-final-newline t)
#+end_src

** Recentf
Number of items to be saved in recent file list.

#+begin_src emacs-lisp
  (recentf-mode 1)
  (setq recentf-max-saved-items 2048)
#+end_src

** Compilation buffer scroll
Make compilation buffer scroll with content.

#+begin_src emacs-lisp
  (setq compilation-scroll-output t)
#+end_src

** Tramp settings
Make tramp auto-save in another local directory.

#+begin_src emacs-lisp
  (require 'tramp)
  (setq tramp-default-method "ssh")
  (setq tramp-auto-save-directory (concat user-emacs-directory "tramp.autosave/"))
  (setq explicit-shell-file-name "/bin/bash")
  (add-to-list 'tramp-remote-path 'tramp-own-remote-path)

  (defun storvik/tramp-parse-sconfigs (path)
    (mapcan 'tramp-parse-sconfig
            (directory-files path t "[^\.].+$")))

  (map-put tramp-completion-function-alist-ssh
           'storvik/tramp-parse-sconfigs "~/.ssh/config.d")

  (mapc (lambda (method)
          (tramp-set-completion-function method
           '((tramp-parse-sconfig "/etc/ssh_config")
             (tramp-parse-sconfig "~/.ssh/config")
             (tramp-parse-shosts "~/.ssh/known_hosts")
             (tramp-parse-rhosts "~/.rhosts")
             (tramp-parse-rhosts "~/.shosts")
             (tramp-parse-rhosts "/etc/hosts.equiv")
             (tramp-parse-rhosts "/etc/shosts.equiv")
             (tramp-parse-shosts "/etc/ssh_known_hosts")
             (tramp-parse-sconfig "/etc/ssh_config")
             (storvik/tramp-parse-sconfigs "~/.ssh/config.d"))))
        '("scp" "scpc" "ssh"))

#+end_src

** Whitespace
Delete trailing whitespaces on save.

#+begin_src emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src

* Appearance settings

#+begin_src emacs-lisp
  (when (boundp 'pgtk-initialized)
    (setq default-frame-alist '((undecorated . t)))) ;; Remove title bar when using pgtk
  (when (fboundp 'tool-bar-mode) (tool-bar-mode -1))
  (when (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
  (when (fboundp 'menu-bar-mode) (menu-bar-mode -1))
#+end_src

** Font
Set default font and size.

#+begin_src emacs-lisp
  (with-eval-after-load 'storvik/gui
    (set-face-attribute 'default nil :font (sys-diversification
                                            "Iosevka Nerd Font-10" ;
                                            "Iosevka Nerd Font-10"
                                            "Courier New-10")))
#+end_src

** [[https://github.com/domtronn/all-the-icons.el][All the icons]]

#+begin_src emacs-lisp
  (use-package all-the-icons)
#+end_src

** Startup messages
Turn off splash screen and startup message.

#+begin_src emacs-lisp
  (setq inhibit-startup-message t
        initial-scratch-message ""
        inhibit-startup-echo-area-message t)
#+end_src

** Theme
Checks for file =custom_theme.el= and loads file if available.
If not default theme used is =doom-theme-one=.

#+begin_src emacs-lisp
  (use-package doom-themes
    :config
    (load-theme 'doom-nord t)
    (doom-themes-org-config))
#+end_src

** [[https://github.com/seagle0128/doom-modeline][Doom modeline]]
To have icons one must run =M-x all-the-icons-install-fonts=.

#+begin_src emacs-lisp
  (use-package doom-modeline
    :hook (after-init . doom-modeline-mode)
    :config
    (setq find-file-visit-truename t)
    (setq doom-modeline-icon t))
#+end_src

** [[https://github.com/tarsius/hl-todo][Highlight Todo]]
Highlight todo, fixme, etc.

#+begin_src emacs-lisp
  (use-package hl-todo
    :hook (after-init . global-hl-todo-mode)
    :config
    (setq hl-todo-highlight-punctuation ":"))
#+end_src

** [[https://github.com/Fanael/rainbow-delimiters][Rainbow delimiters]]
Added to `prog-mode-hook`.

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :config
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
#+end_src

** [[https://www.emacswiki.org/emacs/ShowParenMode][Show paren]]
Show paren mode highlights the mathing pair of parentheses.

#+begin_src emacs-lisp
  (show-paren-mode 1)
#+end_src

** [[https://github.com/aspiers/smooth-scrolling][Smooth scrolling]]
Smoother scrolling, with a margin of 5.

#+begin_src emacs-lisp
  (use-package smooth-scrolling
    :config
    (smooth-scrolling-mode 1)
    (setq smooth-scroll-margin 5))
#+end_src

** Tab width
Use tabs, set default tab width to 4.

#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 4)
#+end_src

** Turn off audible bell
Turn off audible and visible bell.

#+begin_src emacs-lisp
  (setq ring-bell-function 'ignore)
#+end_src

** Y/N Prompt
Make emacs use y/n instead of yes/no.

#+begin_src emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+end_src

** Unique buffer names
Helps differentiating between buffers with similar / same name.

#+begin_src emacs-lisp
  (require 'uniquify)
#+end_src

* Keybindings

All overrides (key bindings that overrides existing ones) are [[https://stackoverflow.com/questions/683425/globally-override-key-binding-in-emacs][placed in a minor mode]], =storvik/overrides-minor-mode=.
This way it's easy to completely disable all overrides if default behaviour is needed.
Other custom keybindings are placed behind a prefix map, =storvik/prefix-map=, making it easy to maintain and discover using whick-key.
Inspired by [[https://karl-voit.at/2018/07/08/emacs-key-bindings/][this post]].

*Adding keybindings to map can be done the following ways:*

: (bind-key "m w" #'function-name map-name)

or

: (bind-keys
:  :map map-name
:  ("f" . function-name))

or

: (use-package example-package
:   :bind (:map map-name
:         ("f" . function-name)))

** storvik/overrides-minor-mode

#+begin_src emacs-lisp
  (defvar storvik/overrides-minor-mode-map
    (let ((map (make-sparse-keymap)))
      (define-key map (kbd "RET") 'newline-and-indent)
      (define-key map (kbd "C-j") 'newline-and-indent)
      map)
    "storvik/overrides-minor-mode keymap.")

  (define-minor-mode storvik/overrides-minor-mode
    "A minor mode so that my key settings override major modes."
    :init-value t
    :lighter " storvik-key-overrides")

  ;; Enable minor mode, maybe it should
  (storvik/overrides-minor-mode 1)

  ;; Disable overrides minor mode in minibuffer
  (defun storvik/overrides-minor-mode-disable-hook ()
    (storvik/overrides-minor-mode 0))

  ;; Disable overrides in some modes
  (mapc
   (lambda (hook)
     (add-hook hook 'storvik/overrides-minor-mode-disable-hook))
   '(minibuffer-setup-hook
     eshell-mode-hook
     mu4e-headers-mode-hook
     magit-post-display-buffer-hook
     python-shell-first-prompt-hook
     org-agenda-mode-hook
     mu4e-main-mode-hook
     sly-db-hook
     sly-mrepl-mode-hook
     dired-mode-hook
     deadgrep-mode-hook
     help-mode-hook
     cider-repl-mode-hook))
#+end_src

** storvik/prefix-map

#+begin_src emacs-lisp
  (global-unset-key (kbd "C-z"))
  (define-prefix-command 'storvik/prefix-map)

  (use-package bind-key
    :bind (:prefix-map storvik/prefix-map
           :prefix-docstring "Storviks keyboard map"
           :prefix "C-z")
    :after org)
#+end_src

** [[http://emacswiki.org/emacs/key-chord.el][Key Chord]]
Key chord, run command when two keys are pressed simultanously.

#+begin_src emacs-lisp
  (use-package key-chord
    :init
    (setq key-chord-two-keys-delay .015
          key-chord-one-key-delay .020)
    (key-chord-mode 1)
    (key-chord-define-global ",u" 'undo)
    (key-chord-define-global ",r" 'redo)
    (key-chord-define-global ",o" 'other-window)
    (key-chord-define-global ",0" 'delete-window)
    (key-chord-define-global ",1" 'delete-other-windows)
    (key-chord-define-global ",2" 'split-window-below)
    (key-chord-define-global ",3" 'split-window-right)
    (key-chord-define-global "xf" 'counsel-find-file)
    (key-chord-define-global "mx" 'counsel-M-x))
#+end_src

use-package key chord extension:

#+begin_src emacs-lisp
  (use-package use-package-chords
    :config (key-chord-mode 1))
#+end_src

** [[https://github.com/emacsorphanage/god-mode][God mode]]

#+begin_src emacs-lisp
  (use-package god-mode
    :bind (:map storvik/prefix-map
           ("SPC" . god-mode-all)
           :map god-local-mode-map
           ("q" . god-mode-all)
           ("z" . repeat))
    :custom
    (god-exempt-major-modes nil)
    (god-exempt-predicates nil))
#+end_src

* Misc
** [[https://github.com/joddie/pcre2el][pcre2el]]

#+begin_src emacs-lisp
  (use-package pcre2el)
#+end_src

** [[https://github.com/nflath/sudo-edit][sudo edit]]
Sometimes I forgot to plan ahead when I should use sudo.
Now sudo-edit comes to the rescue!

#+begin_src emacs-lisp
  (use-package sudo-edit)
#+end_src

* Platform dependant
Load config file dependant on current platform.

** Windows
*** Use git bash on windows

#+begin_src emacs-lisp
  (let ((git-bash-executable "C:/Program Files/Git/usr/bin/bash.exe"))
    (when (and (eq system-type 'windows-nt)
               (file-exists-p git-bash-executable))
      (setq explicit-shell-file-name git-bash-executable)
      (setq explicit-sh-args '("-login" "-i"))

      ;; Make sure Unix tools are in front of `exec-path'
      (let ((bash (executable-find "bash")))
        (when bash
          (push (file-name-directory bash) exec-path)))

      ;; Update PATH from exec-path
      (let ((path (mapcar 'file-truename
                          (append exec-path
                                  (split-string (getenv "PATH") path-separator t)))))
        (setenv "PATH" (mapconcat 'identity (delete-dups path) path-separator)))))
#+end_src

** Darwin
*** Ctrl and cmd
Use Ctrl key as control modifier and Cmd as meta modifier.

#+begin_src emacs-lisp
  (when (eq system-type 'darwin)
    (setq mac-command-modifier 'meta)
    (setq mac-control-modifier 'control))
#+end_src

* Terminal specific
** Mouse clicks
Enable mouse clicks in terminal.

#+begin_src emacs-lisp
  (when (not (window-system))
    (xterm-mouse-mode +1))
#+end_src

* Completion framework and friends
** [[https://github.com/minad/vertico][Vertico]]

#+begin_src emacs-lisp
  (use-package vertico
    :init
    (vertico-mode))

  ;; Preserve history avvross restarts
  (use-package savehist
    :init
    (savehist-mode))

  ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
  ;; Vertico commands are hidden in normal buffers.
  (setq read-extended-command-predicate
        #'command-completion-default-include-p)

  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  ;; Enable recursive minibuffers
  (setq enable-recursive-minibuffers t)
#+end_src

** [[https://github.com/minad/consult][Consult]]

#+begin_src emacs-lisp
  (use-package consult
    :bind (:map storvik/overrides-minor-mode-map
           ;; C-c bindings (mode-specific-map)
           ("C-c h" . consult-history)
           ("C-c b" . consult-bookmark)
           ("C-c k" . consult-kmacro)
           ;; C-x bindings (ctl-x-map)
           ("C-x M-:" . consult-complex-command) ;; orig. repeat-complet-command
           ("C-x b" . consult-buffer) ;; orig. switch-to-buffer
           ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
           ("C-x 5 b" . consult-buffer-other-frame) ;; orig. switch-to-buffer-other-frame
           ;; Custom M-# bindings for fast register access
           ("M-#" . consult-register-load)
           ("M-'" . consult-register-store) ;; orig. abbrev-prefix-mark (unrelated)
           ("C-M-#" . consult-register)
           ;; Other custom bindings
           ("M-y" . consult-yank-pop)     ;; orig. yank-pop
           ("<help> a" . consult-apropos) ;; orig. apropos-command
           ;; M-g bindings (goto-map)
           ("M-g e" . consult-compile-error)
           ("M-g M-g" . consult-goto-line) ;; orig. goto-line
           ("M-g o" . consult-outline)
           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ("M-g i" . consult-imenu)
           ("M-g I" . consult-project-imenu)
           ;; M-s bindings (search-map)
           ("M-s f" . consult-find)
           ("M-s L" . consult-locate)
           ("M-s g" . consult-grep)
           ("M-s G" . consult-git-grep)
           ("M-s R" . consult-ripgrep)
           ("M-s l" . consult-line)
           ("M-s m" . consult-multi-occur)
           ("M-s k" . consult-keep-lines)
           ("M-s u" . consult-focus-lines)
           ;; Customizations that map to ivy
           ("C-x C-r" . consult-recent-file)
           ("C-c o" . consult-file-externally)
           ;; Isearch integration
           ("M-s e" . consult-isearch)
           ;; ("s-t" . jnf/consult-find-using-fd)
           :map isearch-mode-map
           ("M-e" . consult-isearch)   ;; orig. isearch-edit-string
           ("M-s e" . consult-isearch) ;; orig. isearch-edit-string
           ("M-s l" . consult-line))                 ;; required by consult-line to detect isearch
    :init
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)
    :config
    ;; function that returns project root, works for project.el
    (setq consult-project-root-function
          (lambda ()
            (when-let (project (project-current))
              (car (project-roots project)))))
    ;; narrow key
    (setq consult-narrow-key "<")
    (with-eval-after-load 'vertico
      (require 'consult-vertico))
    (advice-add #'completing-read-multiple
          :override #'consult-completing-read-multiple))
#+end_src

** [[https://github.com/oantolin/orderless][Orderless]]
Orderless completion style.

#+begin_src emacs-lisp
  (use-package orderless
    :init
    (setq completion-styles '(orderless)
          completion-category-defaults nil
          completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src

** [[https://github.com/oantolin/embark][Embark]]

#+begin_src emacs-lisp
  (use-package embark
    :after sudo-edit
    :demand t
    :bind
    (("C-." . embark-act)
     ("M-." . embark-dwim)
     ("C-h b" . embark-bindings)
     :map embark-file-map
     ("s" . sudo-edit))
    :config
    (setq prefix-help-command #'embark-prefix-help-command))

  (use-package embark-consult
    :after (embark consult))
#+end_src

** [[https://github.com/minad/marginalia][Marginalia]]
Annotations in minibuffer.

#+begin_src emacs-lisp
  (use-package marginalia
    :after vertico
    :bind (("M-A" . marginalia-cycle)
           :map minibuffer-local-map
           ("M-A" . marginalia-cycle))
    :init
    (marginalia-mode))
#+end_src

** [[https://github.com/minad/corfu][Corfu]]

#+begin_src emacs-lisp
  (use-package corfu
    :after orderless
    :custom
    (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
    (corfu-auto t)                 ;; Enable auto completion
    (corfu-quit-at-boundary nil)   ;; Automatically quit at word boundary, nil due to orderless
    (corfu-quit-no-match t)        ;; Quit if no match
    (corfu-preview-current nil)    ;; Disable current candidate preview
    :init
    (corfu-global-mode))
#+end_src

** [[https://github.com/jdtsmith/kind-icon][Kind-icons]]

#+begin_src emacs-lisp
  (use-package kind-icon
    :after corfu
    :custom
    (kind-icon-default-face 'corfu-default) ; to compute blended backgrounds correctly
    :config
    (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter))
#+end_src

** [[https://github.com/minad/affe][Affe]]

#+begin_src emacs-lisp
  (use-package affe
    :bind (:map storvik/overrides-minor-mode-map
           ("M-s r" . affe-grep))
    :preface
    (defun affe-orderless-regexp-compiler (input _type)
      (setq input (orderless-pattern-compiler input))
      (cons input (lambda (str) (orderless--highlight input str))))
    :config
    (setq affe-regexp-function #'orderless-pattern-compiler
          affe-highlight-function #'orderless-highlight-matches))
#+end_src

** [[https://github.com/iyefrat/all-the-icons-completion][All the icons completion]]

#+begin_src emacs-lisp
  (use-package all-the-icons-completion
    :after marginalia
    :hook (marginalia-mode . all-the-icons-completion-marginalia-setup)
    :init
    (with-eval-after-load 'storvik/gui
      (all-the-icons-completion-marginalia-setup)))
#+end_src

* Navigation and editing
** [[https://github.com/abo-abo/ace-window][Ace-window]]
Easier window movement, bind it to default other-window =C-x o=.

#+begin_src emacs-lisp
  (use-package ace-window
    :bind (:map storvik/overrides-minor-mode-map ("C-x o" . ace-window))
    :init
    (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)))
#+end_src

** [[https://github.com/abo-abo/avy][Avy]]
Tool for jumping to a given char on the screen.

#+begin_src emacs-lisp
  (use-package avy
    :bind (:map storvik/overrides-minor-mode-map
           ("M-g g" . avy-goto-line)
           ("M-j" . avy-goto-char-timer))
    :config
    (defun avy-action-mark-to-char (pt)
      (activate-mark)
      (goto-char pt))
    (defun avy-action-copy-whole-line (pt)
      (save-excursion
        (goto-char pt)
        (cl-destructuring-bind (start . end)
            (bounds-of-thing-at-point 'line)
          (copy-region-as-kill start end)))
      (select-window
       (cdr
        (ring-ref avy-ring 0)))
      t)
    (defun avy-action-yank-whole-line (pt)
      (avy-action-copy-whole-line pt)
      (save-excursion (yank))
      t)
    (defun avy-action-kill-whole-line (pt)
      (save-excursion
        (goto-char pt)
        (kill-whole-line))
      (select-window
       (cdr
        (ring-ref avy-ring 0)))
      t)
    (defun avy-action-teleport-whole-line (pt)
      (avy-action-kill-whole-line pt)
      (save-excursion (yank)) t)
    (defun avy-action-embark (pt)
      (unwind-protect
          (save-excursion
            (goto-char pt)
            (embark-act))
        (select-window
         (cdr (ring-ref avy-ring 0))))
      t)
    (defun avy-show-dispatch-help ()
      "Display action shortucts in echo area."
      (let ((len (length "avy-action-"))
            (itms (length avy-dispatch-alist))
            (msg ""))
        (dotimes (i itms)
          (let ((x (nth i avy-dispatch-alist)))
            (setf msg (concat msg
                              (when (and (eq (mod i 4) 0)
                                         (not (eq i 0)))
                                "\n")
                              (format "%s: %-30s"
                                      (propertize
                                       (char-to-string (car x))
                                       'face 'aw-key-face)
                                      (substring (symbol-name (cdr x)) len))))))
        (message msg)))
    ;; (setf (alist-get ?. avy-dispatch-alist) 'avy-action-embark
    ;;       (alist-get ?  avy-dispatch-alist) 'avy-action-mark-to-char
    ;;       (alist-get ?k avy-dispatch-alist) 'avy-action-kill-stay
    ;;       (alist-get ?K avy-dispatch-alist) 'avy-action-kill-whole-line
    ;;       (alist-get ?t avy-dispatch-alist) 'avy-action-teleport
    ;;       (alist-get ?T avy-dispatch-alist) 'avy-action-teleport-whole-line
    ;;       (alist-get ?y avy-dispatch-alist) 'avy-action-yank
    ;;       (alist-get ?w avy-dispatch-alist) 'avy-action-copy
    ;;       (alist-get ?W avy-dispatch-alist) 'avy-action-copy-whole-line
    ;;       (alist-get ?Y avy-dispatch-alist) 'avy-action-yank-whole-line)
    (setq avy-dispatch-alist '((46 . avy-action-embark)
                               (116 . avy-action-teleport)
                               (121 . avy-action-yank)
                               (107 . avy-action-kill-stay)
                               (32 . avy-action-mark-to-char)
                               (84 . avy-action-teleport-whole-line)
                               (89 . avy-action-yank-whole-line)
                               (75 . avy-action-kill-whole-line)
                               (122 . avy-action-zap-to-char)
                               (119 . avy-action-copy)
                               (105 . avy-action-ispell)
                               (120 . avy-action-kill-move)
                               (109 . avy-action-mark)
                               (87 . avy-action-copy-whole-line))))
#+end_src

** [[https://github.com/Wilfred/deadgrep][Deadgrep]]
Use ripgrep from Emacs.

#+begin_src emacs-lisp
  (use-package deadgrep
    :bind (:map storvik/prefix-map ("s" . deadgrep)))
#+end_src

** [[https://github.com/magnars/expand-region.el][Expand region]]
This package expands region by semantic units.

#+begin_src emacs-lisp
  (use-package expand-region
    :bind (:map storvik/prefix-map ("e" . hydra-expand-region/body))
    :config
    (defhydra hydra-expand-region (:color pink :exit t :hint nil)
      "
  ^mark^                     ^region
  ^^^^^^^^-------------------------------------------
  _w_: word                   _e_: expand
  _s_: sentence               _c_: contract
  _d_: defun
  _p_: pairs
  "
      ("w" er/mark-word)
      ("s" er/mark-sentence)
      ("d" er/mark-defun)
      ("p" er/mark-inside-pairs)
      ("e" er/expand-region)
      ("c" er/contract-region)
      ("q" nil "cancel")))
#+end_src

** [[https://github.com/jrosdahl/fancy-dabbrev][Fancy dabbrev]]

#+begin_src emacs-lisp
  (use-package fancy-dabbrev
    :commands (fancy-dabbrev-mode)
    :bind (:map storvik/overrides-minor-mode-map
           ("C-<tab>" . fancy-dabbrev-expand))
    :custom
    (fancy-dabbrev-preview-delay 0.0)
    (fancy-dabbrev-preview-context 'before-non-word)
    (fancy-dabbrev-expansion-on-preview-only t)
    (fancy-dabbrev-indent-command 'indent-for-tab-command)
    :init
    (with-eval-after-load 'storvik/gui
      (global-fancy-dabbrev-mode)))
#+end_src

** Hyperlinks
Open hyperlinks at point. =C-c B(rowse)=.

#+begin_src emacs-lisp
  (setq browse-url-browser-function (sys-diversification
                                      'browse-url-generic
                                      'browse-url-default-macosx-browser
                                      'browse-url-default-windows-browser)
        browse-url-generic-program "firefox")

  (bind-key "C-c B" 'browse-url-at-point)
#+end_src

** [[https://github.com/emacsfodder/move-text][MoveText]]
Move text up down with =C-c m= followed by =n= or =p=.
Moves region if marked.

#+begin_src emacs-lisp
  (use-package move-text
    :bind (:map storvik/prefix-map ("m" . hydra-move-text/body))
    :config
    (defhydra hydra-move-text (:hint nil)
      "Move line or region"
      ("p" move-text-up "Up")
      ("n" move-text-down "Down")))
#+end_src

** [[https://endlessparentheses.com/emacs-narrow-or-widen-dwim.html][Narrow dwim]]
This is an awesome function from Endless.

#+begin_src emacs-lisp
  (defun narrow-or-widen-dwim (p)
    "Widen if buffer is narrowed, narrow-dwim otherwise.
  Dwim means: region, org-src-block, org-subtree, or
  defun, whichever applies first. Narrowing to
  org-src-block actually calls `org-edit-src-code'.

  With prefix P, don't widen, just narrow even if buffer
  is already narrowed."
    (interactive "P")
    (declare (interactive-only))
    (cond ((and (buffer-narrowed-p) (not p)) (widen))
          ((region-active-p)
           (narrow-to-region (region-beginning)
                             (region-end)))
          ((derived-mode-p 'org-mode)
           ;; `org-edit-src-code' is not a real narrowing
           ;; command. Remove this first conditional if
           ;; you don't want it.
           (cond ((ignore-errors (org-edit-src-code) t)
                  (delete-other-windows))
                 ((ignore-errors (org-narrow-to-block) t))
                 (t (org-narrow-to-subtree))))
          ((derived-mode-p 'latex-mode)
           (LaTeX-narrow-to-environment))
          (t (narrow-to-defun))))

  (bind-key "n" #'narrow-or-widen-dwim storvik/prefix-map)
#+end_src

** [[https://github.com/magnars/multiple-cursors.el][Multiple cursors]]
Multiple cursors is an awesome package thats makes editing multiple entries with similar structure a breeze.
This awesome hydra is stolen from [[https://github.com/abo-abo/hydra/wiki/multiple-cursors][hydra wiki]].

#+begin_src emacs-lisp
  (use-package multiple-cursors
    :bind (:map storvik/prefix-map ("c" . hydra-multiple-cursors/body))
    :config
    (defhydra hydra-multiple-cursors (:hint nil)
      "
   Up^^             Down^^           Miscellaneous           % 2(mc/num-cursors) cursor%s(if (> (mc/num-cursors) 1) \"s\" \"\")
  ------------------------------------------------------------------
   [_p_]   Next     [_n_]   Next     [_l_] Edit lines  [_0_] Insert numbers
   [_P_]   Skip     [_N_]   Skip     [_a_] Mark all    [_A_] Insert letters
   [_M-p_] Unmark   [_M-n_] Unmark   [_s_] Search
   [Click] Cursor at point       [_q_] Quit"
      ("l" mc/edit-lines :exit t)
      ("a" mc/mark-all-like-this :exit t)
      ("n" mc/mark-next-like-this)
      ("N" mc/skip-to-next-like-this)
      ("M-n" mc/unmark-next-like-this)
      ("p" mc/mark-previous-like-this)
      ("P" mc/skip-to-previous-like-this)
      ("M-p" mc/unmark-previous-like-this)
      ("s" mc/mark-all-in-region-regexp :exit t)
      ("0" mc/insert-numbers :exit t)
      ("A" mc/insert-letters :exit t)
      ("<mouse-1>" mc/add-cursor-on-click)
      ;; Help with click recognition in this hydra
      ("<down-mouse-1>" ignore)
      ("<drag-mouse-1>" ignore)
      ("q" nil)))
#+end_src

* Language
Set default ispell language to English.

#+begin_src emacs-lisp
  (setq ispell-dictionary "en")
  (use-package spell-fu)
#+end_src

* Dired

** [[https://github.com/emacsmirror/dired-plus][dired-plus]]

#+begin_src emacs-lisp
  (use-package dired+
    :init
    (setq diredp-hide-details-initially-flag nil)
    :config
    (diredp-toggle-find-file-reuse-dir 1))
#+end_src

** [[https://github.com/wyuenho/all-the-icons-dired][all the icons dired support]]

#+begin_src emacs-lisp
  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))
#+end_src

* Git
** [[https://magit.vc/][Magit]]

#+begin_src emacs-lisp
  (use-package magit
    :demand t
    :when (executable-find "git")
    :bind (:map storvik/prefix-map
           ("g" . magit-status)
           :map magit-status-mode-map
           ("TAB" . magit-section-toggle)
           ("<C-tab>" . magit-section-cycle))
    :config
    (setq magit-git-executable "git"))
#+end_src

** [[https://github.com/alphapapa/magit-todos][Magit todos]]

#+begin_src elisp
  (use-package magit-todos
    :after magit
    :hook (after-init . magit-todos-mode))
#+end_src

** [[https://github.com/dgutov/diff-hl][diff-hl]]

#+begin_src emacs-lisp
  (use-package diff-hl
    :hook ((dired-mode . diff-hl-dired-mode)
           (magit-pre-refresh . diff-hl-magit-pre-refresh)
           (magit-post-refresh . diff-hl-magit-post-refresh))
    :init
    (with-eval-after-load 'storvik/gui
      (global-diff-hl-mode)))
#+end_src

** [[https://gitlab.com/pidu/git-timemachine][git-timemachine]]

#+begin_src emacs-lisp
  (use-package git-timemachine)
#+end_src

* Eshell
SSH with =cd /ssh:remote-server:=.

** Alias

#+begin_src emacs-lisp
  (defun eshell/ll (&rest args)
    "Alias ll -> ls -l"
    (apply #'eshell/ls (cons '-l args)))

  (defun eshell/clc ()
    "Clear the eshell buffer."
    (eshell/clear-scrollback))
#+end_src

** Prompt
Custom prompt inspired by [[http://www.modernemacs.com/post/custom-eshell/][this post]].

#+begin_src emacs-lisp
  (defun storvik/eshell-fishy-path (path)
    "Takes eshell path and makes it fishy."
    (let ((pathlist (split-string (replace-regexp-in-string
                                   (file-truename "~") "~" path) "/")))
      (concat (string-join (mapcar (lambda (el)
                                     (unless (= (length el) 0)
                                       (substring el 0 1)))
                                   (butlast pathlist 1))
                           "/")
              (unless (and (eq (length pathlist) 1)
                           (string= (car pathlist) "~"))
                "/")
              (car (last pathlist)))))

  (defun storvik/eshell-prompt-function ()
    "Custom eshell prompt function."
    (concat
     (if (file-remote-p default-directory)
         (propertize (file-remote-p default-directory)
                     'face font-lock-keyword-face)
       (concat (propertize user-login-name 'face font-lock-function-name-face)
               "@"
               (propertize system-name 'face font-lock-keyword-face)))
     (propertize (concat "  "
                         (storvik/eshell-fishy-path (eshell/pwd)))
                 'face font-lock-string-face)
     (when (magit-get-current-branch)
       (propertize (concat " ( "
                           (magit-get-current-branch)
                           ")")
                   'face font-lock-comment-face))
     "> "))

  (setq eshell-prompt-function 'storvik/eshell-prompt-function)
  (setq eshell-prompt-regexp "[a-zA-Z0-9-_@:/]+\\ \\ [a-zA-Z0-9-_/~]+\\( \( [a-zA-Z0-9-_@/.]+\)\\)*>\\ ")
#+end_src

** Buffer names
Custom buffer names =*eshell*<path/to/eshell>=.

#+begin_src emacs-lisp
  (defun storvik/eshell-rename-buffer ()
    "Rename buffer based on path."
    (interactive)
    (rename-buffer (concat "*eshell*<"
                           (replace-regexp-in-string
                            (file-truename "~") "~" (eshell/pwd))
                           ">") t))

  (add-hook 'eshell-mode-hook 'storvik/eshell-rename-buffer)
  (add-hook 'eshell-directory-change-hook 'storvik/eshell-rename-buffer)
#+end_src

* Programming
** [[https://github.com/flycheck/flycheck][Flycheck]]
Flycheck is a programming grammar checker.
It includes on the fly function lookup and syntax validation.

#+begin_src emacs-lisp
  (use-package flycheck
    :defer t
    :init
    ;;(add-hook 'prog-mode-hook #'flycheck-mode)
    :commands flycheck-mode)
#+end_src

** [[https://github.com/emacs-lsp/lsp-mode][Language Server Protocol]]
Language server protocol support.

Some performance enhancing settings, see lsp-mode README.md for details.

#+begin_src emacs-lisp
  (setq gc-cons-threshold 100000000)
  (setq read-process-output-max (* 1024 1024)) ;; 1mb
#+end_src

#+begin_src emacs-lisp
  (use-package lsp-mode
    :bind-keymap ("C-c l" . lsp-command-map)
    :custom
    (lsp-keymap-prefix "C-c l")
    (lsp-prefer-flymake nil)
    (lsp-auto-execute-action nil)
    (lsp-enable-indentation nil)
    (lsp-completion-provider :none) ;; we use Corfu!
    :init
    (defun storvik/orderless-dispatch-flex-first (_pattern index _total)
      (and (eq index 0) 'orderless-flex))
    (defun storvik/lsp-mode-setup-completion ()
      (setf (alist-get 'styles (alist-get 'lsp-capf completion-category-defaults))
            '(orderless)))
    ;; Optionally configure the first word as flex filtered.
    (add-hook 'orderless-style-dispatchers #'storvik/orderless-dispatch-flex-first nil 'local)
    :hook
    (lsp-completion-mode . storvik/lsp-mode-setup-completion))

  (use-package lsp-ui
    :commands lsp-ui-mode
    :custom
    (lsp-ui-doc-position 'top)
    (lsp-ui-doc-show-with-cursor t)
    (lsp-ui-doc-show-with-mouse nil)
    (lsp-ui-doc-use-webkit t)
    :custom-face
    (lsp-ui-doc-background ((t (:background nil)))))
#+end_src

*** [[https://github.com/gagbo/consult-lsp][consult-lsp]]

#+begin_src emacs-lisp
  (use-package consult-lsp
    :after (consult lsp-mode)
    :commands consult-lsp-symbols
    :config
    (define-key lsp-mode-map [remap xref-find-apropos] #'consult-lsp-symbols))
#+end_src

** [[https://github.com/emacs-tree-sitter/elisp-tree-sitter][Tree sitter]]

#+begin_src emacs-lisp
  (use-package tree-sitter
    :hook (tree-sitter-after-on . tree-sitter-hl-mode)
    :config
    (global-tree-sitter-mode))

  (use-package tree-sitter-langs)
#+end_src

** [[https://github.com/raxod502/apheleia][Apheleia]]

#+begin_src emacs-lisp
  (use-package apheleia
    :straight
    (:host github :repo "raxod502/apheleia")
    :config
    (setf (alist-get 'clang-format apheleia-formatters)
          '("clang-format" "-style={BasedOnStyle: Google, IndentWidth: 4, ColumnLimit: 120, SortIncludes: false}"))
    (add-to-list 'apheleia-formatters '(goimports "goimports"))
    (setf (alist-get 'go-mode apheleia-mode-alist) 'goimports)
    (add-to-list 'apheleia-formatters '(nixpkgs-fmt "nixpkgs-fmt"))
    (setf (alist-get 'nix-mode apheleia-mode-alist) 'nixpkgs-fmt)
    (setf (alist-get 'clj-zprint apheleia-formatters)
          '("zprint" "{:style [:community :justified] :map {:comma? false}}"))
    (add-to-list 'apheleia-mode-alist '(clojure-mode . clj-zprint))
    (setf (alist-get 'cljs-zprint apheleia-formatters)
          '("zprint" "{:style [:hiccup] :map {:comma? false}}"))
    (add-to-list 'apheleia-mode-alist '(clojurescript-mode . cljs-zprint))
    (apheleia-global-mode +1))
#+end_src

** [[https://www.gnu.org/software/auctex/][Auctex]]
Auctex is the best way editing LaTeX documents!
#+begin_src emacs-lisp
  (use-package tex
    :straight auctex
    :config
    (setq TeX-auto-save t)
    (setq TeX-parse-self t)
    (setq-default TeX-master nil)
    (add-hook 'LaTeX-mode-hook 'flyspell-mode)      ;; Enable flyspell as default
    (add-hook 'LaTeX-mode-hook 'turn-on-reftex)     ;; Enable reftex as default
    (setq reftex-plug-into-AUCTeX t)
    (setq TeX-PDF-mode t)                           ;; Enable PDF mode

    ;; Use Skim as default pdf viewer
    ;; Skim's displayline is used for forward search (from .tex to .pdf)
    ;; option -b highlights the current line; option -g opens Skim in the background
    (setq TeX-view-program-selection '((output-pdf "PDF Viewer")))
    (setq TeX-view-program-list
          ;;(sys-diversification
          ;; '(("PDF Viewer" "/Applications/Skim.app/Contents/SharedSupport/displayline -b -g %n %o %b"))
          ;; "/usr/share/emacs/site-lisp/mu4e")))
          '(("PDF Viewer" "/Applications/Skim.app/Contents/SharedSupport/displayline -b -g %n %o %b"))))

  ;; Use aspell
  (add-to-list 'exec-path "/usr/local/bin")
  (setq ispell-program-name "aspell")
  (setq ispell-list-command "--list")
#+end_src

I use LatexMk to compile my latex documents. Replace default latex command with LatexMk.

#+begin_src emacs-lisp
  (use-package auctex-latexmk
    :config
    (auctex-latexmk-setup)
    (setq auctex-latexmk-inherit-TeX-PDF-mode t)
    (add-hook 'TeX-mode-hook (lambda ()
                              (setq TeX-command-default "LatexMk"))))
#+end_src

** C/C++
*** CUDA files
Associate .cu files with c-mode

#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.cu\\'" . c-mode))
#+end_src

*** Default indentation
Set default indentation to 4.

#+begin_src emacs-lisp
  (defun my-c-mode-common-hook ()
      (c-set-offset 'substatement-open 0)
      ;;(setq c++-tab-always-indent nil)
      (setq c-basic-offset 4)
      (setq c-indent-level 4)
      (setq tab-stop-list '(4 8 12 16 20 24 28 32 36 40 44 48 52 56 60))
      (setq tab-width 4))
  (add-hook 'c-mode-common-hook 'my-c-mode-common-hook)
#+end_src

** [[https://github.com/Kitware/CMake/blob/master/Auxiliary/cmake-mode.el][CMake mode]]
CMake mode to edit files related to cmake.

#+begin_src emacs-lisp
  (use-package cmake-mode
    :when (executable-find "cmake"))
#+end_src

** [[http://www.emacswiki.org/emacs/CsvMode][CSV mode]]
Prettify csv files.

#+begin_src emacs-lisp
  (use-package csv-mode)
#+end_src

** Dart

I mainly use dart when programming with Flutter.

*** [[https://github.com/bradyt/dart-mode][Dart mode]]
Major mode for editing dart files.

#+begin_src emacs-lisp
  (use-package dart-mode)
#+end_src

*** [[https://github.com/emacs-lsp/lsp-dart][lsp-dart]]
Setup lsp-dart, thanks to [[https://github.com/ericdallo/dotfiles/blob/master/.doom.d/config.el#L150-L155][ericdallo]] for the snippet in :config.

#+begin_src emacs-lisp
  (defun storvik/lsp-dart ()
    (interactive)
    (envrc-reload-all)
    (when-let (dart-exec (executable-find "dart"))
      (let ((dart-sdk-path (-> dart-exec
                             file-chase-links
                             file-name-directory
                             directory-file-name
                             file-name-directory)))
        (setq lsp-dart-sdk-dir dart-sdk-path
              lsp-dart-dap-flutter-hot-reload-on-save t)))
    (lsp))

  (use-package lsp-dart)
#+end_src

** [[https://github.com/spotify/dockerfile-mode][Dockerfile mode]]
Simple syntax highlightning for Docker containers.

#+begin_src emacs-lisp
  (use-package dockerfile-mode)
#+end_src

** [[https://github.com/smihica/emmet-mode][Emmet mode]]
Emmet-mode to expand classes to markup.
Use =emmet-expand-line= to do this.

#+begin_src emacs-lisp
  (use-package emmet-mode
    :hook (web-mode sgml-mode)
    :config
    (setq emmet-expand-jsx-className? t))
#+end_src

** [[https://github.com/wwwjfy/emacs-fish/][Fish mode]]
   Edit fish shell files.

#+begin_src emacs-lisp
  (use-package fish-mode)
#+end_src

** Go
*** [[https://github.com/dominikh/go-mode.el][Go mode]]
Major mode for Go.

Install dependencies and useful go stuff by running:
#+begin_src shell
  go get -u golang.org/x/lint/golint && \
	go get -u golang.org/x/tools/cmd/... && \
	go get -u github.com/kisielk/errcheck
#+end_src


#+begin_src emacs-lisp
  (use-package go-mode)
#+end_src

*** LSP
To install lsp support for Go gopls must be installed:
=GO111MODULE=on go get golang.org/x/tools/gopls@latest=

#+begin_src emacs-lisp
  ;; Add LSP remote client for golang
  (lsp-register-client
      (make-lsp-client :new-connection (lsp-tramp-connection "gopls")
                       :major-modes '(go-mode)
                       :remote? t
                       :server-id 'gopls-remote))
#+end_src

*** [[https://github.com/syohex/emacs-go-add-tags][Go add tags]]
Lets you add json tags to structs calling =go-add-tags=.

#+begin_src emacs-lisp
  (use-package go-add-tags
    :requires go-mode
    :when (executable-find "go"))
#+end_src

*** [[https://github.com/benma/go-dlv.el][Go dlv]]
Go debugger integration, uses delve.

#+begin_src emacs-lisp
  (use-package go-dlv
    :requires go-mode
    :when (executable-find "go"))
#+end_src

*** [[https://github.com/dominikh/go-mode.el][Go guru]]

#+begin_src emacs-lisp
  (use-package go-guru
    :requires go-mode)
#+end_src

*** [[https://github.com/samertm/go-stacktracer.el][Go stacktrace]]
Jump around go stacktrace, use =M-x=  =go-stacktracer-region=.

#+begin_src emacs-lisp
  (use-package go-stacktracer
    :requires go-mode)
#+end_src

*** [[https://github.com/nlamirault/gotest.el][Gotest]]
Run test files.

#+begin_src emacs-lisp
  (use-package gotest
    :requires go-mode)
#+end_src

*** [[https://github.com/storvik/gomacro-mode][gomacro-mode]]
Mode for interacting with gomacro REPL.

#+begin_src emacs-lisp
  (use-package gomacro-mode
    :requires go-mode
    :hook (go-mode . gomacro-mode))
#+end_src

** [[https://github.com/kmonad/kbd-mode][KBD mode]]

#+begin_src emacs-lisp
  (use-package kbd-mode
    :straight (kbd-mode :type git :host github :repo "kmonad/kbd-mode")
    :mode "\\.kbd\\'")
#+end_src

** Lisp
*** [[https://github.com/emacsmirror/paredit][Paredit]]

#+begin_src emacs-lisp
  (use-package paredit
    :hook ((emacs-lisp-mode . paredit-mode)
           (sly-mode . paredit-mode)
           (clojure-mode . paredit-mode)
           (clojurescript-mode . paredit-mode))
    :config
    (unbind-key "M-s" paredit-mode-map))
#+end_src

*** [[https://github.com/joaotavora/sly][SLY]]
SLY is a [[https://github.com/slime/slime][Slime]] fork with lots of improvements!
To choose between multiple lisps use =C-- M-x sly=.

#+begin_src emacs-lisp
  (use-package sly
    :when (or (executable-find "sbcl")
              (executable-find "ecl"))
    :init
    (cond ((and (executable-find "sbcl")
                (executable-find "ecl"))
           (setq sly-lisp-implementations
                 '((sbcl ("sbcl" "--noinform") :coding-system utf-8-unix)
                   (ecl ("ecl")))))
          ((executable-find "sbcl")
           (setq inferior-lisp-program "sbcl --noinform"))
          ((executable-find "ecl")
           (setq inferior-lisp-program "ecl"))))

  (use-package sly-asdf
    :after sly)
#+end_src

*** Clojure
**** [[https://github.com/clojure-emacs/clojure-mode][clojure-mode]]

#+begin_src emacs-lisp
  (use-package clojure-mode)
#+end_src

**** [[https://github.com/clojure-emacs/cider][cider]]

#+begin_src emacs-lisp
  (use-package cider)
#+end_src

**** [[https://github.com/clojure-emacs/inf-clojure][inf-clojure]]
#+begin_src emacs-lisp
  (use-package inf-clojure
    :after clojure-mode)
#+end_src

*** Elisp

#+begin_src emacs-lisp
  (global-set-key [remap eval-last-sexp] 'pp-eval-last-sexp)
#+end_src

**** [[https://github.com/purcell/package-lint][Package lint]]
Linter for Emacs packages meta data.

#+begin_src emacs-lisp
  (use-package package-lint)
#+end_src

** [[https://sourceforge.net/projects/matlab-emacs/][Matlab]]
Major mode for editing matlab `.m` files.

#+begin_src emacs-lisp
  (use-package matlab
    :straight matlab-mode)
#+end_src

** Markdown
*** [[http://jblevins.org/projects/markdown-mode/][Markdown mode]]
Mode to edit markdown files more efficiently.

#+begin_src emacs-lisp
  (use-package edit-indirect)

  (use-package markdown-mode
    :after edit-indirect
    :commands (markdown-mode gfm-mode)
    :custom
    (markdown-command "multimarkdown")
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . gfm-mode)
           ("\\.markdown\\'" . markdown-mode)))
#+end_src

*** [[https://github.com/ardumont/markdown-toc][Markdown toc]]
Generate toc with `markdown-toc-generate-toc`.

#+begin_src emacs-lisp
  (use-package markdown-toc)
#+end_src

*** [[https://github.com/ancane/markdown-preview-mode][Markdown preview]]
Preview markdown files, =pandoc= must be installed, with =markdown-preview=.

#+begin_src emacs-lisp
  (use-package markdown-preview-mode
    :when (executable-find "pandoc"))
#+end_src

** [[https://github.com/wentasah/meson-mode][Meson mode]]
Mode for editing meson build files.

#+begin_src elisp
  (use-package meson-mode)
#+end_src

** [[https://github.com/ajc/nginx-mode][Nginx mode]]
Nginx mode for editing Nginx config files.

#+begin_src emacs-lisp
  (use-package nginx-mode)
#+end_src

** Nix

*** [[https://github.com/NixOS/nix-mode][Nix-mode]]
Mode for editing =.nix= files.

#+begin_src emacs-lisp
  (use-package nix-mode
    :mode "\\.nix\\'")
#+end_src

*** [[https://github.com/jwiegley/nix-update-el][nix-update]]
Update rev/sha from Emacs.

#+begin_src emacs-lisp
  (use-package nix-update)
#+end_src

** [[https://github.com/skuro/plantuml-mode][PlantUML]]

#+begin_src emacs-lisp
  (use-package plantuml-mode
    :custom
    (plantuml-default-exec-mode 'executable)
    :config
    (add-to-list 'org-src-lang-modes '("plantuml" . plantuml))
    (add-to-list 'auto-mode-alist '("\\.plantuml\\'" . plantuml-mode)))
#+end_src

** [[https://github.com/jschaf/powershell.el][Powershell]]
Edit powershell scripts.

#+begin_src elisp
  (use-package powershell)
#+end_src

** [[https://github.com/protocolbuffers/protobuf][Protobuf mode]]
Protobuf-mode to edit protobuf files.

#+begin_src emacs-lisp
  (use-package protobuf-mode)
#+end_src

** Python
*** [[https://emacs-lsp.github.io/lsp-pyright/][lsp-pyright]]
Decided to try Microsoft [[https://github.com/microsoft/pyright][pyright]] lsp server.
Depends on a never nodejs installation.

#+begin_src emacs-lisp
  (use-package lsp-pyright)
#+end_src

*** [[https://github.com/jorgenschaefer/pyvenv][pyvenv.el]] handles virtual environments in Emacs.
Use =M-x pyvenv-activate= to activate environment.

#+begin_src emacs-lisp
  (use-package pyvenv)
#+end_src

** [[https://github.com/openscad/openscad/blob/master/contrib/scad-mode.el][scad mode]]

#+begin_src emacs-lisp
  (use-package scad-mode)
#+end_src

** SQL mode
Bind file extentions to sql mode.

#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.create\\'" . sql-mode))
  (add-to-list 'auto-mode-alist '("\\.drop\\'" . sql-mode))
  (add-to-list 'auto-mode-alist '("\\.alter\\'" . sql-mode))
#+end_src

Function to capitalize SQL keywords

#+begin_src emacs-lisp
  (defun point-in-comment ()
    (let ((syn (syntax-ppss)))
      (and (nth 8 syn)
           (not (nth 3 syn)))))

  (defun my-upcase-all-sql-keywords ()
    (interactive)
    (require 'sql)
    (save-excursion
      (dolist (keywords sql-mode-mysql-font-lock-keywords)
        (goto-char (point-min))
        (while (re-search-forward (car keywords) nil t)
          (unless (point-in-comment)
            (goto-char (match-beginning 0))
            (upcase-word 1))))))

  ;;(add-hook 'sql-mode-hook
  ;;          (lambda ()
  ;;            (add-hook 'before-save-hook 'my-upcase-all-sql-keywords nil 'make-it-local)))
#+end_src

** [[https://github.com/holomorph/systemd-mode][Systemd mode]]
Edit systemd files with syntax highlightning.

#+begin_src emacs-lisp
  (use-package systemd)
#+end_src

** [[http://web-mode.org/][Web mode]]
Works with php files with html and js.

#+begin_src emacs-lisp
  (use-package web-mode
    :init
    (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.php?\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.css?\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.js?\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.vue?\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.sass?\\'" . web-mode))
    (setq web-mode-content-types-alist
          '(("jsx" . "\\.js[x]?\\'")
            ("jsx" . "\\.sass?\\'")))
    (setq-default web-mode-markup-indent-offset 2)
    (setq-default web-mode-css-indent-offset 4)
    (setq-default web-mode-code-indent-offset 4)
    (setq-default web-mode-sql-indent-offset 4)
    (setq web-mode-enable-current-column-highlight t))
#+end_src

** [[https://github.com/yoshiki/yaml-mode][YAML mode]]
YAML editing improved.

#+begin_src emacs-lisp
  (use-package yaml-mode)
#+end_src

** [[https://github.com/purcell/envrc][envrc]]
Use purcell's envrc, must be late in config as per instructions.

#+begin_src emacs-lisp
  (use-package envrc
    :when (executable-find "direnv")
    :config
    (envrc-global-mode))
#+end_src

* Org mode
** Initial config
Install org mode package

#+begin_src emacs-lisp
  ;; Archive location
  (setq org-archive-location "archive/%s_archive::")

  ;; Indentation
  (setq org-startup-indented t)
  (setq org-indent-mode t)
  (setq org-adapt-indentation t)
  (setq org-catch-invisible-edit 'nil)

  ;; File locations
  (setq org-directory "~/developer/org/org")
  (setq org-default-notes-file "~/developer/org/org/refile.org")
  (setq org-agenda-files (directory-files-recursively org-directory "\\.org$"))

  ;; Refile
  (setq org-refile-use-outline-path t)
  (setq org-outline-path-complete-in-steps nil)
  (setq org-refile-allow-creating-parent-nodes (quote confirm))
  (setq org-refile-targets (quote ((nil :maxlevel . 9)
                                   (org-agenda-files :maxlevel . 9))))

  ;; Clock
  (setq org-clock-persist 'history)
  (org-clock-persistence-insinuate)
  (setq org-clock-out-remove-zero-time-clocks t)
  (setq org-log-into-drawer "LOGBOOK")
  (setq org-clock-into-drawer 1)
  (setq org-log-done 'time)

  ;; Tags / context
  (setq org-tag-persistent-alist
        '(("@work" . ?w)
          ("@mo" . ?m)
          ("@nesna" .?n)
          ("@home" . ?h)
          ("@computer" . ?c)
          ("@phone" . ?p)))

  ;; Misc
  (setq org-export-allow-bind-keywords t)
#+end_src

** [[https://github.com/sabof/org-bullets][Bullets]]

#+begin_src emacs-lisp
  (use-package org-bullets
    :hook (org-mode . org-bullets-mode))
#+end_src

** Capture
Capture templates and such

#+begin_src emacs-lisp
  (setq org-capture-templates
        (quote (("t" "Todo" entry (file "~/developer/org/org/refile.org")
                 "* TODO %?\n")
                ("c" "Todo code" entry (file "~/developer/org/org/refile.org")
                 "* TODO %?\n%l\n")
                ("n" "Note" entry (file "~/developer/org/org/refile.org")
                 "* %? :NOTE:\n")
                ("m" "Meeting" entry (file "~/developer/org/org/refile.org")
                 "* MEETING %t %? :meeting:\n" :clock-in t :clock-resume t)
                ("p" "Phone Call" entry (file "~/developer/org/org/refile.org")
                 "* PHONE %T %? :phone:\n" :clock-in t :clock-resume t)
                ("r" "Respond to email, must be run from mu4e" entry (file "~/developer/org/org/refile.org")
                 "* TODO Respond to %:from on %:subject\n\t%a\n" :immediate-finish t)
                ("e" "E-mail todo, must be run from mu4e" entry (file "~/developer/org/org/refile.org")
                 "* TODO %?\n%a\n")
                )))
#+end_src

** Todo
Custom todo states are defined.

#+begin_src emacs-lisp
  (setq org-todo-keywords
        '((sequence "TODO(t)" "NEXT(n@/!)" "WIP(s@/!)" "|" "DONE(d)")
          (sequence "WAITING(w@/!)" "DELEGATED(g@/!)" "FOLLOWUP(f@/!)" "|" "CANCELLED(c@/!)")
          (sequence "PHONE" "MEETING")))
#+end_src

This defines different colors for different states.
#+begin_src emacs-lisp
  (setq org-todo-keyword-faces
        '(("TODO" :foreground "orange red" :weight bold)
          ("NEXT" :foreground "dark orange" :wight bold)
          ("WIP" :foreground "deep sky blue" :weight bold)
          ("DONE" :foreground "forest green" :weight bold)
          ("WAITING" :foreground "orange" :weight bold)
          ("DELEGATED" :foreground "light green" :weight bold)
          ("FOLLOWUP" :foreground "deep sky blue" :weight bold)
          ("CANCELLED" :foreground "forest green" :weight bold)
          ("MEETING" :foreground "hot pink" :weight bold)
          ("PHONE" :foreground "violet red" :weight bold)))
#+end_src

** Agenda
Agenda view using [[https://github.com/alphapapa/org-super-agenda][org-super-agenda]].

#+begin_src emacs-lisp
  (use-package org-super-agenda
    :after org
    :config
    (defun storvik/agenda-context-emoji ()
      "Should insert emoji for given context, but alignment never worked."
      (let ((tags (concat (org-entry-get (point) "TAGS"))))
        (concat (when (string-match-p "@computer" tags)
                  "@computer")
                (when (string-match-p "@phone" tags)
                  "@phone")
                (when (string-match-p "@work" tags)
                  "@work")
                (when (string-match-p "@home" tags)
                  "@home"))))
    (setq org-agenda-custom-commands
          '(("w" " Work"
             ((agenda ""
                      ((org-agenda-prefix-format " %i %-22:c%?-12t% s")
                       (org-agenda-overriding-header "")
                       (org-agenda-remove-tags t) ;; remove tags from agenda view
                       (org-super-agenda-groups
                        '((:discard (:not (:tag ("avanti"))))
                          (:name "This week")))))
              (alltodo ""
                       ((org-agenda-prefix-format "  %i %-16:c %-10(storvik/agenda-context-emoji) %-6e ")
                        (org-agenda-hide-tags-regexp "@") ;; remove context tags from tag list
                        (org-agenda-remove-tags t)
                        (org-agenda-overriding-header "")
                        (org-super-agenda-groups
                         '((:discard (:not (:tag ("avanti"))))
                           (:name "🛠️ Work in progress" :todo "WIP")
                           (:name "⏳ Next" :todo "NEXT")
                           (:name "🗒️ Todo" :todo "TODO")
                           (:name "🕙 Waiting" :todo "WAITING")
                           (:discard (:todo ("PHONE" "MEETING")))))))))
            ("p" " Private"
             ((agenda ""
                      ((org-agenda-prefix-format " %i %-22:c%?-12t% s")
                       (org-agenda-overriding-header "")
                       (org-super-agenda-groups
                        '((:discard (:tag ("avanti")))
                          (:name "This week")))))
              (alltodo ""
                       ((org-agenda-prefix-format " %i %-22:c")
                        (org-agenda-remove-tags t)
                        (org-agenda-overriding-header "")
                        (org-super-agenda-groups
                         '((:discard (:tag ("avanti")))
                           (:name "🛠️ Work in progress" :todo "WIP")
                           (:name "⏳ Next" :todo "NEXT")
                           (:name "🗒️ Todo" :todo "TODO")
                           (:name "🕙 Waiting" :todo "WAITING")
                           (:name "📌 Someday" :tag "someday")
                           (:discard (:todo ("PHONE" "MEETING")))))))))))
    (org-super-agenda-mode))
#+end_src

** [[https://orgmode.org/worg/exporters/koma-letter-export.html][Koma letter]]
Use org-mode to write letters.

#+begin_src emacs-lisp
  (eval-after-load 'ox '(require 'ox-koma-letter))
  (eval-after-load 'ox-latex
    '(add-to-list 'org-latex-packages-alist '("AUTO" "babel" t) t))
#+end_src

** org plantuml

#+begin_src emacs-lisp
  (setq org-plantuml-exec-mode 'plantuml)
#+end_src

** [[https://github.com/abo-abo/org-download][org-download]]

#+begin_src emacs-lisp
  (use-package org-download
    :after org)
#+end_src

** [[https://org-roam.readthedocs.io][org-roam]]
My roam config, trying to use roam as a personal knowledge base and daily note taking.

#+begin_src emacs-lisp
  (defun storvik/org-roam-ripgrep ()
    "Search org roam files with ripgrep"
    (interactive)
    (consult-ripgrep org-roam-directory))

  (defun storvik/org-roam-dailies-ripgrep ()
    "Search org roam files with ripgrep"
    (interactive)
    (consult-ripgrep org-roam-dailies-directory))

  (defun storvik/org-roam-deadgrep (search-term)
    (interactive (list (deadgrep--read-search-term)))
    (deadgrep search-term org-roam-directory))

  (defun storvik/org-roam-dailies-deadgrep (search-term)
    (interactive (list (deadgrep--read-search-term)))
    (deadgrep search-term org-roam-dailies-directory))

  (use-package org-roam
    :after org
    :custom
    (org-roam-completion-everywhere t)
    (org-roam-directory (file-truename "~/developer/org/roam-notes"))
    (org-roam-capture-templates
     '(("d" "default" plain "%?"
        :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                           "#+title: ${title}\n")
        :unnarrowed t)
       ("p" "person" plain "%?"
        :if-new (file+head "people/${slug}.org"
                           "#+title: ${title}\n\n- phone ::\n- email ::\n- company ::\n- role ::\n- location ::\n- how we met ::\n- birthday ::\n- interests ::\n- tags ::\n")
        :unnarrowed t)))
    ;; Dailies
    (org-roam-dailies-directory (file-truename "~/developer/org/roam-dailies"))
    (org-roam-dailies-capture-templates
     '(("d" "default" entry
        "* %?"
        :if-new (file+head "%<%Y-%m-%d>.org"
                           "#+title: %<%Y-%m-%d>\n"))
       ("m" "meeting" entry
        "* MEETING %T %? :meeting:\n"
        :clock-in t :clock-resume t
        :if-new (file+head "%<%Y-%m-%d>.org"
                           "#+title: %<%Y-%m-%d>\n"))
       ("p" "phone" entry
        "* PHONE %T %? :phone:\n"
        :clock-in t :clock-resume t
        :if-new (file+head "%<%Y-%m-%d>.org"
                           "#+title: %<%Y-%m-%d>\n"))))
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n g" . org-roam-graph)
           ("C-c n i" . org-roam-node-insert)
           ("C-c n c" . org-roam-capture)
           ;; Dailies
           ("C-c n j" . org-roam-dailies-capture-today)
           ("C-c n s" . storvik/org-roam-ripgrep))
    :init
    (setq org-roam-v2-ack t)
    :config
    (org-roam-setup)
    (require 'org-roam-protocol))
#+end_src

** [[https://github.com/org-roam/org-roam-ui][org-roam-ui]]

#+begin_src emacs-lisp
  ;; Fix simple-httpd when using straight, see here
  ;; https://github.com/nnicandro/emacs-jupyter/issues/160#issuecomment-520138197
  (use-package simple-httpd
    :straight
    (:host github :repo "skeeto/emacs-web-server" :local-repo "simple-httpd"))

  (use-package org-roam-ui
    :straight
    (:host github :repo "org-roam/org-roam-ui" :branch "main" :files ("*.el" "out"))
    :after org-roam
    :custom
    (org-roam-ui-sync-theme t)
    (org-roam-ui-follow t)
    (org-roam-ui-update-on-save t)
    (org-roam-ui-open-on-start t))
#+end_src

** Org hydra and keybinding

#+begin_src emacs-lisp
  (use-package emacs
    :bind (:map storvik/prefix-map ("o" . hydra-org-mode/body))
    :config
    (defhydra hydra-org-mode (:color pink :exit t :hint nil)
      "
  ^org^                     ^roam^                                         ^dailies
  ^^^^^^^^------------------------------------------------------------------------------------------------------------------
  _a_: agenda               _l_: buffer toggle        _f_: find              _j_: capture dailies   _k_: capture date
  _C_: capture              _c_: capture              _i_: insert node       _t_: goto today        _R_: ripgrep dailies
  ^ ^                       _r_: ripgrep roam         _s_: deadgrep roam     _y_: goto yesterday    _S_: deadgrep dailies
  ^ ^                       _u_: roam ui              ^ ^                    _d_: goto day
  "
      ("a" org-agenda)
      ("C" org-capture)
      ("l" org-roamd-buffer-toggle)
      ("c" org-roam-capture)
      ("f" org-roam-node-find)
      ("i" org-roam-node-insert)
      ("u" org-roam-ui-mode)
      ("r" storvik/org-roam-ripgrep)
      ("R" storvik/org-roam-dailies-ripgrep)
      ("s" storvik/org-roam-deadgrep)
      ("S" storvik/org-roam-dailies-deadgrep)
      ("j" org-roam-dailies-capture-today)
      ("k" org-roam-dailies-capture-date)
      ("t" org-roam-dailies-goto-today)
      ("y" org-roam-dailies-goto-yesterday)
      ("d" org-roam-dailies-goto-date)
      ("q" nil "cancel")))
#+end_src

* Email

#+begin_src emacs-lisp
  (let ((storvik/mu4e-config "~/.emacs.d-mu4e/mu4e-config.org"))
    (when (and (executable-find "mu")
               (file-exists-p (expand-file-name storvik/mu4e-config)))
      (org-babel-load-file (expand-file-name storvik/mu4e-config))))
#+end_src

* Functions
** Copy file path to clipboard
Copy path of current file to clipboard.

#+begin_src emacs-lisp
  (defun copy-filename ()
    "Copy the current buffer file name to the clipboard."
    (interactive)
    (let ((filename (if (equal major-mode 'dired-mode)
                        default-directory
                      (buffer-file-name))))
      (when filename
        (kill-new filename)
        (message "Copied buffer file name '%s' to the clipboard." filename))))
#+end_src

** Create non-existant folder
Automatically create folder when visiting a new file.

#+begin_src emacs-lisp
  (defun my-create-non-existent-directory ()
    (let ((parent-directory (file-name-directory buffer-file-name)))
      (when (and (not (file-exists-p parent-directory))
                 (y-or-n-p (format "Directory `%s' does not exist! Create it?" parent-directory)))
        (make-directory parent-directory t))))
  (add-to-list 'find-file-not-found-functions #'my-create-non-existent-directory)
#+end_src

** Find init
Finds the init file and opens it.

#+begin_src emacs-lisp
  (defun find-init-file ()
    "Edit main init file, emacs_init.org."
    (interactive)
    (find-file (expand-file-name "emacs_init.org" user-emacs-directory)))
#+end_src

** Reindent buffer
Reindents the entire buffer. Use =C-c /=.

#+begin_src emacs-lisp
  (defun indent-buffer ()
    "Indents an entire buffer using the default intenting scheme."
    (interactive)
    (save-excursion
      (delete-trailing-whitespace)
      (indent-region (point-min) (point-max) nil)
      (if indent-tabs-mode
          ;; Add more modes before/after web-mode
          (if (derived-mode-p 'web-mode)
              (untabify (point-min) (point-max))
            (tabify (point-min) (point-max)))
        (untabify (point-min) (point-max)))))

  (bind-key "/" #'indent-buffer storvik/prefix-map)
#+end_src

** Rename current file
Rename the current buffer and file. Thanks to [[http://whattheemacsd.com/][whattheemacsd]].

#+begin_src emacs-lisp
  (defun rename-current-buffer-file ()
    "Renames current buffer and file it is visiting."
    (interactive)
    (let ((name (buffer-name))
          (filename (buffer-file-name)))
      (if (not (and filename (file-exists-p filename)))
          (error "Buffer '%s' is not visiting a file!" name)
        (let ((new-name (read-file-name "New name: " filename)))
          (if (get-buffer new-name)
              (error "A buffer named '%s' already exists!" new-name)
            (rename-file filename new-name 1)
            (rename-buffer new-name)
            (set-visited-file-name new-name)
            (set-buffer-modified-p nil)
            (message "File '%s' successfully renamed to '%s'"
                     name (file-name-nondirectory new-name)))))))
#+end_src

** Termbin
Function that sends region or buffer to termbin and puts URL in kill ring.

#+begin_src elisp
  (defun termbin-region (begin end)
    "Sends region to termbin, if no region active send entire buffer"
    (interactive "r")
    (kill-new
     (car
      (split-string
       (with-output-to-string
         (if (use-region-p)
             (shell-command-on-region begin end "nc termbin.com 9999" standard-output)
           (shell-command-on-region (point-min) (point-max) "nc termbin.com 9999" standard-output)))
       "\n"))))
#+end_src

* Daemon
Start emacs server

#+begin_src emacs-lisp
  (unless (daemonp)
    (server-start))
#+end_src
