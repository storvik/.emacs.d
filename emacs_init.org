#+TITLE: Storviks Emacs Configurations
#+AUTHOR: Petter S. Storvik
#+EMAIL: petterstorvik@gmail.com
#+PROPERTY: header-args    :results silent

* Notes
This emacs configuration aims to provide usable emacs environments that are platform independant.

** Add to workflow
- Get help with =C-h i= (manuals) and =C-h a= (apropos, search for commands containing search string).
- =C-h f= to describe function and =C-h v= to describe variables. Should be exchanged with counsel describe.
- Keep buffers around, using =C-x s= to save all.
- Use =C-M-f/b= to move by s-expression. From start paren to end paren and such.
- Use =C-M-= (d)own into list, (u)p out of list. Move into the nearest balanced expression.
- Use =C-M-= (n)ext list, (p)revious list.
- Move by defun with =C-M-a/e=.
- Ivy-hydra =C-o= when in ivy minibuffer.

* Personal information
Add name and E-mail.

#+begin_src emacs-lisp
  (setq user-full-name "Petter S. Storvik"
        user-mail-address "petterstorvik@gmail.com")
#+end_src

* General settings
** System
Macro for setting different settings for OSX / Linux.
[[https://gist.github.com/beyeran/4118401][Thanks to beyeran]].

#+begin_src emacs-lisp
  (setq sys-unix-p (or (eq system-type 'gnu/linux)
                       (eq system-type 'darwin)))

  (defun sys-type-p (name)
    (eq system-type name))

  (defmacro sys-diversification (gnu/linux &optional darwin win)
     (cond ((sys-type-p 'gnu/linux) gnu/linux)
           ((sys-type-p 'darwin) darwin)
           ((sys-type-p 'windows-nt) win)
           (t nil)))
#+end_src

Set coding system before doing anything.
This should maybe make Windows auto-update package smoother.

#+begin_src emacs-lisp
  (prefer-coding-system 'utf-8-unix)
#+end_src

** Initial settings
Set up =use-package= and add MELPA and upstream ORG Mode as archive.
Configure load-path to include =~/.emacs.d/elisp/=.

#+begin_src emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
  (package-initialize)

  (mapc
   (lambda (package)
     (if (not (package-installed-p package))
         (progn
           (package-refresh-contents)
           (package-install package))))
   '(use-package diminish bind-key))

  (eval-when-compile
    (require 'use-package))
  (require 'diminish)
  (require 'bind-key)
  (setq use-package-always-ensure t)
  ;;(package-refresh-contents)

  (add-to-list 'load-path (concat user-emacs-directory "elisp/"))
#+end_src

** Auto update packages
[[https://github.com/rranelli/auto-package-update.el][Visit webpage]].
Automatically update packages.

#+begin_src emacs-lisp
  (use-package auto-package-update
    :config
    (setq auto-package-update-delete-old-versions t)
    (setq auto-package-update-hide-results t)
    (auto-package-update-maybe))
#+end_src

** Backup
Change backup location to common dir, =~/.emacs.saves= in emacs directory.

#+begin_src emacs-lisp
  (setq backup-directory-alist
        `((".*" . ,(concat user-emacs-directory "emacs.saves/"))))
  (setq auto-save-file-name-transforms
        `((".*" ,(concat user-emacs-directory "emacs.saves/") t)))
 #+end_src

** Bulit in keybindings
Key bindings not related to external packages or functions.

#+begin_src emacs-lisp
  (global-set-key (kbd "M-o") 'other-window)
  (global-set-key (kbd "RET") 'newline-and-indent)
#+end_src

** Turn off alarm
Turn off audible and visible bell.

#+begin_src emacs-lisp
  (setq ring-bell-function 'ignore)
#+end_src

** Path
Use exec-path-from-shell on unix computers.

#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :when sys-unix-p
    :init
    (exec-path-from-shell-initialize))
#+end_src

** Lastpass
[[https://github.com/storvik/emacs-lastpass][Visit webpage]].
Package used to communicate with LastPass.
Depends on lpass command line utility.

#+begin_src emacs-lisp
  (use-package lastpass
    :when (executable-find "lpass")
    :config
    (setq lastpass-user "petterstorvik@gmail.com")
    (lastpass-auth-source-enable))
#+end_src

** Key Chord
[[http://emacswiki.org/emacs/key-chord.el][Visit website]].
Key chord, run command when two keys are pressed simultanously.

#+begin_src emacs-lisp
  (use-package key-chord
    :init
    (progn
      (setq key-chord-two-keys-delay .015
            key-chord-one-key-delay .020)
      (key-chord-mode 1)
      (key-chord-define-global ",u" 'undo)
      (key-chord-define-global ",r" 'redo)
      (key-chord-define-global ",o" 'other-window)
      (key-chord-define-global ",0" 'delete-window)
      (key-chord-define-global ",1" 'delete-other-windows)
      (key-chord-define-global ",2" 'split-window-below)
      (key-chord-define-global ",3" 'split-window-right)
      (key-chord-define-global "xf" 'counsel-find-file)
      (key-chord-define-global "mx" 'counsel-M-x)))
#+end_src

use-package key chord extension:

#+begin_src emacs-lisp
  (use-package use-package-chords
    :config (key-chord-mode 1))
#+end_src

** Multiple cursors
[[https://github.com/magnars/multiple-cursors.el][Visit website]].
Multiple cursors is an awesome package thats makes editing multiple entries with similar structure a breeze.

#+begin_src emacs-lisp
  (use-package multiple-cursors
    :bind (("C->" . mc/mark-next-like-this)
           ("C-<" . mc/mark-previous-like-this)
           ("C-*" . mc/mark-all-like-this)
           ("C-;" . mc/edit-lines)))
#+end_src

** Newline
Add newline to end of files.

#+begin_src emacs-lisp
  (setq require-final-newline t)
#+end_src

** Recentf
Number of items to be saved in recent file list.

#+begin_src emacs-lisp
  (setq recentf-max-saved-items 2048)
#+end_src

** Scrolling
Smoother scrolling, with a margin of 5.

#+begin_src emacs-lisp
  (use-package smooth-scrolling
    :config
    (smooth-scrolling-mode 1)
    (setq smooth-scroll-margin 5))
#+end_src
** Tramp settings
Make tramp auto-save in another local directory.

#+begin_src emacs-lisp
  (require 'tramp)
  (setq tramp-default-method "scp")
  (setq tramp-auto-save-directory (concat user-emacs-directory "tramp.autosave/"))
#+end_src

** Try
[[https://github.com/larstvei/Try][Visit webpage]].
Try allows you to try packages from melpa or a url without installing them / adding them to config.

#+begin_src emacs-lisp
  (use-package try)
#+end_src

** Undo Tree
Undo tree, visualize the undo / redo tree.

#+begin_src emacs-lisp
  (use-package undo-tree
    :diminish undo-tree-mode
    :init
    (global-undo-tree-mode))
#+end_src
** Whitespace
Delete trailing whitespaces on save.

#+begin_src emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src

** Ztree
[[https://github.com/fourier/ztree][Visit website]].
Visualize dir trees and run Ediff on folders.
Useful when upgrading between frameworks and such.

#+begin_src emacs-lisp
  (use-package ztree
    :config
    (setq ediff-window-setup-function 'ediff-setup-windows-plain))
#+end_src

** Typing
How to I train them fingers?

#+begin_src emacs-lisp
  (use-package speed-type)
#+end_src

* Platform dependant
Load config file dependant on current platform.

** Windows
*** Ctrl and cmd
Use Ctrl key as control modifier and Cmd as meta modifier.

#+begin_src emacs-lisp
  (when (eq system-type 'windows-nt)
    (setq coding-system-for-read 'utf-8-unix)
    (setq coding-system-for-write 'utf-8-unix))
#+end_src

*** Use git bash on windows
Use git bash on windows if git bash is found, also change path to [[https://emacs.stackexchange.com/questions/29942/projectile-indexing-wont-work-on-windows][ensure that unix tools are preferred]].

#+begin_src emacs-lisp
  (let ((git-bash-executable "C:/Program Files/Git/usr/bin/bash.exe"))
    (when (and (eq system-type 'windows-nt)
               (file-exists-p git-bash-executable))
      (setq explicit-shell-file-name git-bash-executable)
      (setq explicit-sh-args '("-login" "-i"))

      ;; Make sure Unix tools are in front of `exec-path'
      (let ((bash (executable-find "bash")))
        (when bash
          (push (file-name-directory bash) exec-path)))

      ;; Update PATH from exec-path
      (let ((path (mapcar 'file-truename
                          (append exec-path
                                  (split-string (getenv "PATH") path-separator t)))))
        (setenv "PATH" (mapconcat 'identity (delete-dups path) path-separator)))))
#+end_src


** Darwin
*** Ctrl and cmd
Use Ctrl key as control modifier and Cmd as meta modifier.

#+begin_src emacs-lisp
  (when (eq system-type 'darwin)
    (setq mac-command-modifier 'meta)
    (setq mac-control-modifier 'control))
#+end_src

* Appearance settings
** Font
Set default font and size.

#+begin_src emacs-lisp
  (set-face-attribute 'default nil :font (sys-diversification
                                           "Ubuntu Mono-11"
                                           "Fira Mono-10"
                                           "Courier New-10"))
#+End_src

** Golden ratio
[[https://github.com/roman/golden-ratio.el][Visit website]].
Resize windows so that the active window is optimized for editing.

#+begin_src emacs-lisp
  (use-package golden-ratio
    :diminish golden-ratio-mode
    :init
    (progn
      (golden-ratio-mode 1)
      (setq golden-ratio-auto-scale t))
    :config
    (add-to-list 'golden-ratio-extra-commands 'ace-window))
#+end_src

** Highlight line mode
Highlight current line.

#+begin_src emacs-lisp
  (when window-system
    (global-hl-line-mode))
#+end_src

** Startup messages
Turn off splash screen and startup message.

#+begin_src emacs-lisp
  (setq inhibit-startup-message t
        initial-scratch-message ""
        inhibit-startup-echo-area-message t)
#+end_src

** Theme
Trying gruvbox dark hard theme.

#+begin_src emacs-lisp
  (use-package gruvbox-theme
    :when window-system
    :config
    (progn
    (load-theme 'gruvbox-dark-hard t)))
#+end_src

** Powerline
Powerline makes mode line look better.

#+begin_src emacs-lisp
  (use-package powerline
    :config
    (powerline-default-theme))
#+end_src

** Smart mode line
[[https://github.com/Malabarba/smart-mode-line][Visit website]].
Smart mode line looks pretty, and is actually quite helpful.

#+begin_src emacs-lisp
  (use-package smart-mode-line
    :config
    (progn
      (setq sml/no-confirm-load-theme t)
      (add-to-list 'sml/replacer-regexp-list '("^~/developer/" ":dev:"))
      (add-to-list 'sml/replacer-regexp-list '("^:dev:golang/" ":golang:") t)
      (add-to-list 'sml/replacer-regexp-list '("^:dev:rpi/" ":rpi:") t)
      (add-to-list 'sml/replacer-regexp-list '("^:dev:elisp/" ":elisp:") t)
      (add-to-list 'sml/replacer-regexp-list '("^:dev:www/" ":web:") t)
      (sml/setup)))
#+end_src

** Rainbow delimiters
Added to `prog-mode-hook`.

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :config
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
#+end_src

** Tab width
Use tabs, set default tab width to 4.

#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 4)
#+end_src

** Tool bar modifications
Turn off tool bar and scroll bar. Menu bar is kept on.

#+begin_src emacs-lisp
  (if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
  (if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
  (if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
#+end_src

** Y/N Prompt
Make emacs use y/n instead of yes/no.

#+begin_src emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+end_src

** Unique buffer names
Helps differentiating between buffers with similar / same name.

#+begin_src emacs-lisp
  (require 'uniquify)
#+end_src

* Terminal specific
** Mouse clicks
Enable mouse clicks in terminal.

#+begin_src emacs-lisp
  (when (not (window-system))
    (xterm-mouse-mode +1))
#+end_src

** Disable yasnippet
Disable yasnippet in ansi-term.

#+begin_src emacs-lisp
;;  (add-hook 'term-mode-hook (lambda()
;;                              (setq yas-dont-activate t)))
#+end_src

* Navigation
** Ace-window
[[https://github.com/abo-abo/ace-window][Visit website]].
Easier window movement, bind it to default other-window =C-x o=.

#+begin_src emacs-lisp
  (use-package ace-window
    :bind (("C-x o" . ace-window))
    :init
    (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)))
#+end_src

** Avy
[[https://github.com/abo-abo/avy][Visit webpage]].
Tool for jumping to a given char on the screen.
The following keybindings can be used:
- =C-:= Avy goto char
- =C-'= Avy goto char 2
- =M-g g= Avy goto line
- =M-g w= Avy goto word 1
  - =n= to copy
  - =m= to mark after jumping
  - =x= to kill after jumping
- =M-g e= Avy goto word 0

#+begin_src emacs-lisp
  (use-package avy
    :bind (("C-:" . avy-goto-char)
           ("C-'" . avy-goto-char-2)
           ("M-g g" . avy-goto-line)
           ("M-g w" . avy-goto-word-1)
           ("M-g e" . avy-goto-word-0))
    :chords ((":G" . avy-goto-char)
             ("gf" . avy-goto-line)
             ("gh" . avy-goto-word-1)))
#+end_src

** Expand region
[[https://github.com/magnars/expand-region.el][Visit webpage]].
This package expands region by semantic units.

#+begin_src emacs-lisp
  (use-package expand-region
    :bind (("C-=" . er/expand-region)))
#+end_src

** Hyperlinks
Open hyperlinks at point. =C-c B(rowse)=.

#+begin_src emacs-lisp
  (setq browse-url-browser-function (sys-diversification
                                      'browse-url-generic
                                      'browse-url-default-macosx-browser
                                      'browse-url-default-windows-browser)
        browse-url-generic-program "firefox")

  (bind-key "C-c B" 'browse-url-at-point)
#+end_src

** Winner mode
[[http://emacswiki.org/emacs/WinnerMode][Visit website]].
Winner mode to undo/redo window changes. Used with =C-c left/right=.

#+begin_src emacs-lisp
  (use-package winner
    :init (winner-mode))
#+end_src

* Language
Set default ispell language to English.

#+begin_src emacs-lisp
  (setq ispell-dictionary "en")
#+end_src

* Ivy
[[https://github.com/abo-abo/swiper][Visit webpage]]/[[http://oremacs.com/swiper/][Documentation]].
Ivy replaces the heavier Helm package, try it and be amazed!

#+begin_src emacs-lisp
  (use-package counsel
    :bind
    (("M-y" . counsel-yank-pop)
     :map ivy-minibuffer-map
     ("M-y" . ivy-next-line-and-call)))

  (use-package swiper
    :diminish ivy-mode
    :config
    (progn
      (ivy-mode 1)
      (setq ivy-height 10)
      (setq ivy-count-format "")
      (setq ivy-extra-directories nil)     ;; Do not show "./" and "../"
      (setq ivy-virtual-abbreviate 'full)  ;; Show full file path
      (setq ivy-use-virtual-buffers t)     ;; Show recently killed buffers
      (setq ivy-use-ignore-default 'always)
      (setq ivy-ignore-buffers '("smex-autoloads.el"
                                 "emacs.d/custom.el"))
      (setq ivy-initial-inputs-alist nil)
      (setq ivy-re-builders-alist
            '((t	 . ivy--regex-ignore-order)))
      (advice-add 'swiper :after 'recenter))
    :bind (("C-s" . swiper)
           ("M-x" . counsel-M-x)
           ("C-x C-f" . counsel-find-file)
           ("C-c C-r" . ivy-resume)
           ("C-x C-r" . counsel-recentf)
           ("C-c i" . counsel-imenu)
           ("C-c g" . counsel-git)
           ("C-c j" . counsel-git-grep)
           ("C-c k" . counsel-ag)
           ("C-x l" . counsel-locate)))

  (use-package ivy-hydra)
#+end_src

To enhance the M-x experience, smex must be installed.
#+begin_src emacs-lisp
  (use-package smex)
#+end_src

* Magit
Brilliant interface to git.
=C-x g= to open.

#+begin_src emacs-lisp

  (use-package magit
    :when (executable-find "git")
    :bind ("C-x g" . magit-status)
    :config
    (progn
      (defun visit-pull-request-url ()
        "Visit the current branch's PR on Github."
        (interactive)
        (browse-url
         (format "https://github.com/%s/pull/new/%s"
                 (replace-regexp-in-string
                  "\\`.+github\\.com:\\(.+\\)\\.git\\'" "\\1"
                  (magit-get "remote"
                             (magit-get-remote)
                             "url"))
                 (cdr (magit-get-remote-branch)))))
      (setq magit-completing-read-function 'ivy-completing-read)
      (setq magit-git-executable "git")
      (bind-key "v" 'visit-pull-request-url magit-mode-map)
      (bind-keys :map magit-status-mode-map
                 ("TAB" . magit-section-toggle)
                 ("<C-tab>" . magit-section-cycle))
      (bind-keys :map magit-branch-section-map
                 ("RET" . magit-checkout))))
#+end_src

* Projectile
[[https://github.com/bbatsov/projectile][Visit webpage]].
Projectile simplifies navigation and structuring on large projects.
Git folders are identified as projects, other projects have to have an empty =.projectile=-file to be categorized as project.
List all available bindings with =C-c p=, which is the prefix, followed by =C-h=.

#+begin_src emacs-lisp
  (use-package projectile
    :diminish projectile-mode
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :config
    (setq projectile-completion-system 'ivy
          projectile-enable-caching t
          projectile-globally-ignored-directories
          (append '("node_modules"
                    ".git"
                    ".gomod")))
    (projectile-mode))
#+end_src

* Programming
** Autocomplete
[[http://company-mode.github.io/][Visit website]].
Company mode autocomplete.

#+begin_src emacs-lisp
  (use-package company
    :defer t
    :diminish company-mode
    :init
    (global-company-mode t)
    :config
    (setq company-idle-delay              nil
          company-minimum-prefix-length   2
          company-show-numbers            t
          company-tooltip-limit           20
          company-dabbrev-downcase        nil)
    :bind
    ("C-;" . company-complete-common))
#+end_src

** C/C++

Use either irony or ycm.
#+begin_src emacs-lisp
  (setq storvik/irony-or-ycm 'ycm)
#+end_src

*** Irony
[[https://github.com/Sarcasm/irony-mode][Visit website]].
Irony for C / C++ code completion.
Depends on libclang.
Ubuntu: =sudo apt-get install libclang-dev=.

Generate cmake completion database, use =cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON .=

#+begin_src emacs-lisp
  (use-package irony
    :when (string= storvik/irony-or-ycm "irony")
    :defer t
    :init
    (progn
      (add-hook 'c++-mode-hook 'irony-mode)
      (add-hook 'c-mode-hook 'irony-mode)
      (add-hook 'objc-mode-hook 'irony-mode)
      (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))
    :config
    (progn
      (defun my-irony-mode-hook ()
        (define-key irony-mode-map
          [remap completion-at-point] 'counsel-irony)
        (define-key irony-mode-map
          [remap complete-symbol] 'counsel-irony))
      (add-hook 'irony-mode-hook 'my-irony-mode-hook)
      (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)))
#+end_src

Company irony is used to interface irony and company.

#+begin_src emacs-lisp
  (use-package company-irony
    :when (string= storvik/irony-or-ycm "irony")
    :defer t
    :init
    (eval-after-load 'company
      '(add-to-list 'company-backends 'company-irony)))
#+end_src

Flycheck irony is used to interface irony and flycheck.

#+begin_src emacs-lisp
  (use-package flycheck-irony
    :when (string= storvik/irony-or-ycm "irony")
    :defer t
    :init
    (eval-after-load 'flycheck
      '(add-hook 'flycheck-mode-hook #'flycheck-irony-setup)))
#+end_src

*** Emacs YCMD
[[https://github.com/abingham/emacs-ycmd][Visit webpage]].
Seems like a faster alternative to irony, even tough i prefere irony :cry:

#+begin_src emacs-lisp
  (use-package ycmd
    :when (string= storvik/irony-or-ycm "ycm")
    :init
    (progn
      (add-hook 'c++-mode-hook #'ycmd-mode)
      (add-hook 'c-mode-hook 'irony-mode))
    :config
    (set-variable 'ycmd-server-command '("python3" "/home/storvik/ycmd/ycmd")))
#+end_src

Use company mode for autocompletion.

#+begin_src emacs-lisp
  (use-package company-ycmd
    :when (string= storvik/irony-or-ycm "ycm")
    :init (company-ycmd-setup))
#+end_src

Flycheck used to check for errors on the fly.

#+begin_src emacs-lisp
  (use-package flycheck-ycmd
    :when (string= storvik/irony-or-ycm "ycm")
    :commands (flycheck-ycmd-setup)
    :init (add-hook 'ycmd-mode-hook 'flycheck-ycmd-setup))
#+end_src

#+begin_src emacs-lisp
  (when (string= storvik/irony-or-ycm "ycm")
    (add-hook 'ycmd-mode-hook 'ycmd-eldoc-mode))
#+end_src

*** Compile key
Change compile key binding to =C-c C-c=.

#+begin_src emacs-lisp
  (add-hook 'c-mode-common-hook
            '(lambda ()
               (local-set-key "\C-c\C-c" 'compile)))
#+end_src

*** CUDA
Associate .cu files with c-mode

#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.cu\\'" . c-mode))
#+end_src

*** Default indentation
Set default indentation to 4.

#+begin_src emacs-lisp
  (defun my-c-mode-common-hook ()
      (c-set-offset 'substatement-open 0)
      ;;(setq c++-tab-always-indent nil)
      (setq c-basic-offset 4)
      (setq c-indent-level 4)
      (setq tab-stop-list '(4 8 12 16 20 24 28 32 36 40 44 48 52 56 60))
      (setq tab-width 4))
(add-hook 'c-mode-common-hook 'my-c-mode-common-hook)
#+end_src

*** Look for Makefile
Look for Makefile in parent folder and change directory.

#+begin_src emacs-lisp
  (require 'cl) ;; If you don't have it already
  (defun* get-closest-pathname (&optional (file "Makefile"))
    (let ((root (expand-file-name "/"))) ;; the win32 builds should translate this correctly
      (expand-file-name file
                        (loop
                         for d = default-directory then (expand-file-name ".." d)
                         if (file-exists-p (expand-file-name file d))
                         return d
                         if (equal d root)
                         return nil))))

  ;; Use make command and change default-directory to the one with the makefile
  (require 'compile)
  (add-hook 'c-mode-hook
            (lambda ()
              (set (make-local-variable 'compile-command)
                   (format "make -k" (get-closest-pathname))) ;;add %s to output the string
              (setq default-directory (substring (get-closest-pathname) 0 -8))))
  (add-hook 'c++-mode-hook
            (lambda ()
              (set (make-local-variable 'compile-command)
                   (format "make -k" (get-closest-pathname)))
              (setq default-directory (substring (get-closest-pathname) 0 -8))))
#+end_src

** CSV files
[[http://www.emacswiki.org/emacs/CsvMode][Visit website]].
Prettify csv files.

#+begin_src emacs-lisp
  (use-package csv-mode)
#+end_src

** Dockerfiles
Simple syntax highlightning for Docker containers.

#+begin_src emacs-lisp
  (use-package dockerfile-mode)
#+end_src

** Elisp
*** Package lint
[[https://github.com/purcell/package-lint][Visit webpage]].
Linter for Emacs packages meta data.

#+begin_src emacs-lisp
  (use-package package-lint)
#+end_src

** Emmet moe
[[https://github.com/smihica/emmet-mode][Visit webpage]].
Emmet-mode to expand classes to markup.
Use =emmet-expand-line= to do this.

#+begin_src emacs-lisp
  (use-package emmet-mode
    :hook (web-mode sgml-mode)
    :config
    (setq emmet-expand-jsx-className? t))
#+end_src

** Fixme/Todo Highlights
Highlights fixme and todo in comments.

#+begin_src emacs-lisp
  (defun font-lock-comment-annotations ()
    "Highlight a bunch of well known comment annotations.
     This functions should be added to the hooks of major modes for programming."
    (font-lock-add-keywords
     nil '(("\\<\\(FIX\\(ME\\)?\\|TODO\\|OPTIMIZE\\|HACK\\|REFACTOR\\):"
            1 font-lock-warning-face t))))

  (add-hook 'prog-mode-hook 'font-lock-comment-annotations)
#+end_src

** Flycheck
[[https://github.com/flycheck/flycheck][Visit webpage]].
Flycheck is a programming grammar checker.
It includes on the fly function lookup and syntax validation.

#+begin_src emacs-lisp
  (use-package flycheck
    :defer t
    :init
    (add-hook 'prog-mode-hook #'flycheck-mode)
    :commands flycheck-mode)
#+end_src

** Go
*** Go mode
[[https://github.com/dominikh/go-mode.el][Visit webpage]].
Major mode for go(lang).
Must import GOPATH enviromental variable.

The following packages must be installed:
#+begin_src bash
go get -u golang.org/x/tools/cmd/...
go get -u github.com/rogpeppe/godef/...
go get -u github.com/nsf/gocode
go get -u golang.org/x/tools/cmd/goimports
go get -u golang.org/x/tools/cmd/guru
go get -u github.com/dougm/goflymake
#+end_src

#+begin_src emacs-lisp
  (use-package go-mode
    :when (executable-find "go")
    :init
    (progn
      (setq gofmt-command "goimports")
      (add-hook 'before-save-hook 'gofmt-before-save)
      (bind-key [remap find-tag] #'godef-jump)
      (bind-key (kbd "C-c C-r") #'go-remove-unused-imports)))
    ;;:config
    ;;(exec-path-from-shell-copy-env "GOPATH")))
#+end_src

*** Go guru

#+begin_src emacs-lisp
  (use-package go-guru
    :requires go-mode)
#+end_src

*** Company-go
[[https://github.com/nsf/gocode/tree/master/emacs-company][Visit webpage]].
Go support for company mode.

#+begin_src emacs-lisp
  (use-package company-go
    :when (executable-find "go")
    :requires go-mode
    :defer t
    :init
    (with-eval-after-load 'company
    (add-to-list 'company-backends 'company-go)))
#+end_src

*** Eldoc
[[https://github.com/syohex/emacs-go-eldoc][Visit webpage]].

#+begin_src emacs-lisp
  (use-package go-eldoc
    :requires go-mode
    :defer t
    :hook (go-mode . go-eldoc-setup))
#+end_src

*** Stacktrace
[[https://github.com/samertm/go-stacktracer.el][Visit webpage]].
Jump around go stacktrace, use =M-x=  =go-stacktracer-region=.

#+begin_src emacs-lisp
  (use-package go-stacktracer
    :when (executable-find "go"))
#+end_src

*** Add tags
[[https://github.com/syohex/emacs-go-add-tags][Visit webpage]].
Lets you add json tags to structs calling =go-add-tags=.

#+begin_src emacs-lisp
  (use-package go-add-tags
    :when (executable-find "go"))
#+end_src

*** Go test
[[https://github.com/nlamirault/gotest.el][Visit webpage]].
Run test files.

#+begin_src emacs-lisp
  (use-package gotest
    :when (executable-find "go"))
#+end_src

*** Go debugger
[[https://github.com/benma/go-dlv.el][Visit webpage]].
Go debugger integration, uses delve.

#+begin_src emacs-lisp
  (use-package go-dlv
    :when (executable-find "go"))
#+end_src

** Latex
Auctex is the best way editing LaTeX documents!

#+begin_src emacs-lisp
  (use-package tex
    :ensure auctex
    :config
    (progn
      (setq TeX-auto-save t)
      (setq TeX-parse-self t)
      (setq-default TeX-master nil)
      (add-hook 'LaTeX-mode-hook 'flyspell-mode)      ;; Enable flyspell as default
      (add-hook 'LaTeX-mode-hook 'turn-on-reftex)     ;; Enable reftex as default
      (setq reftex-plug-into-AUCTeX t)
      (setq TeX-PDF-mode t)                           ;; Enable PDF mode

      ;; Use Skim as default pdf viewer
      ;; Skim's displayline is used for forward search (from .tex to .pdf)
      ;; option -b highlights the current line; option -g opens Skim in the background
      (setq TeX-view-program-selection '((output-pdf "PDF Viewer")))
      (setq TeX-view-program-list
            ;;(sys-diversification
            ;; '(("PDF Viewer" "/Applications/Skim.app/Contents/SharedSupport/displayline -b -g %n %o %b"))
            ;; "/usr/share/emacs/site-lisp/mu4e")))
    '(("PDF Viewer" "/Applications/Skim.app/Contents/SharedSupport/displayline -b -g %n %o %b")))))

  ;; Use aspell
  (add-to-list 'exec-path "/usr/local/bin")
  (setq ispell-program-name "aspell")
  (setq ispell-list-command "--list")
#+end_src

I use LatexMk to compile my latex documents. Replace default latex command with LatexMk.

#+begin_src emacs-lisp
  (use-package auctex-latexmk
    :config
    (progn
      (auctex-latexmk-setup)
      (setq auctex-latexmk-inherit-TeX-PDF-mode t)
      (add-hook 'TeX-mode-hook '(lambda ()
                                (setq TeX-command-default "LatexMk")))))
#+end_src

** Lisp
[[https://github.com/slime/slime][Visit webpage]].
Using SLIME, the superior lisp mode.

#+begin_src emacs-lisp
  (use-package slime
    :when (executable-find "sbcl")
    :init
    (progn
      (setq inferior-lisp-program "/usr/bin/sbcl")
      (setq slime-contribs '(slime-fancy))))
#+end_src

** Lispy
[[https://github.com/abo-abo/lispy][Visit webpage]].
Lispy mode for editing listpy languages, elisp, common lisp, clojure, etc.

#+begin_src emacs-lisp
  (use-package lispy
    :defer t
    :hook ((emacs-lisp-mode . (lambda () (lispy-mode 1)))
           (slime-mode . (lambda () (lispy-mode 1)))))
#+end_src

** Markdown
[[http://jblevins.org/projects/markdown-mode/][Visit webpage]].
Mode to edit markdown files more efficiently.

#+begin_src emacs-lisp
  (use-package markdown-mode
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . gfm-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command (concat "pandoc -f gfm --standalone --highlight-style kate --metadata title=\"MarkdownPreview\" --css "
                                         (file-truename user-emacs-directory)
                                         "pandoc.css")))
#+end_src

** Markdown toc
[[https://github.com/ardumont/markdown-toc][Visit webpage]].
Generate toc with `markdown-toc-generate-toc`.

#+begin_src emacs-lisp
  (use-package markdown-toc)
#+end_src

** Markdown
[[https://github.com/ancane/markdown-preview-mode][Visit webpage]].
Preview markdown files, =pandoc= must be installed, with =markdown-preview=.

#+begin_src emacs-lisp
  (use-package markdown-preview-mode
    :when (executable-find "pandoc"))
#+end_src

** Nginx mode
[[https://github.com/ajc/nginx-mode][Visit webpage]].
Nginx mode for editing Nginx config files.

#+begin_src emacs-lisp
  (use-package nginx-mode)
#+end_src

** Protobufs
Protobuf-mode to edit protobuf files.

#+begin_src emacs-lisp
  (use-package protobuf-mode)
#+end_src

** Python
The following python packages must be installed by running:
=pip install rope jedi flake8 autopep8 yapf=

#+begin_src emacs-lisp
  (use-package elpy
    :defer t
    :init
    (progn
      (elpy-enable)
      (defun my-elpy-before-save-hook ()
        (when (eq major-mode 'python-mode)
          (elpy-format-code)))
      (add-hook 'before-save-hook 'my-elpy-before-save-hook)))
#+end_src

** SQL Mode
Bind file extentions to sql mode.

#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.create\\'" . sql-mode))
  (add-to-list 'auto-mode-alist '("\\.drop\\'" . sql-mode))
  (add-to-list 'auto-mode-alist '("\\.alter\\'" . sql-mode))
#+end_src

Function to capitalize SQL keywords

#+begin_src emacs-lisp
    (defun point-in-comment ()
      (let ((syn (syntax-ppss)))
        (and (nth 8 syn)
             (not (nth 3 syn)))))

    (defun my-upcase-all-sql-keywords ()
      (interactive)
      (require 'sql)
      (save-excursion
        (dolist (keywords sql-mode-mysql-font-lock-keywords)
          (goto-char (point-min))
          (while (re-search-forward (car keywords) nil t)
            (unless (point-in-comment)
              (goto-char (match-beginning 0))
              (upcase-word 1))))))

  ;;(add-hook 'sql-mode-hook
  ;;          (lambda ()
  ;;            (add-hook 'before-save-hook 'my-upcase-all-sql-keywords nil 'make-it-local)))
#+end_src

** Systemd mode
[[https://github.com/holomorph/systemd-mode][Visit webpage]].
Edit systemd files with syntax highlightning.

#+begin_src emacs-lisp
  (use-package systemd)
#+end_src

** Web mode
[[http://web-mode.org/][Visit webpage]].
Works with php files with html and js.

#+begin_src emacs-lisp
  (use-package web-mode
    :init
    (progn
      (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.php?\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.css?\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.js?\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.vue?\\'" . web-mode))
      (add-to-list 'auto-mode-alist '("\\.sass?\\'" . web-mode))
      (setq web-mode-content-types-alist
            '(("jsx" . "\\.js[x]?\\'")
              ("jsx" . "\\.sass?\\'")))
      (setq-default web-mode-markup-indent-offset 2)
      (setq-default web-mode-css-indent-offset 4)
      (setq-default web-mode-code-indent-offset 4)
      (setq-default web-mode-sql-indent-offset 4)
      (setq web-mode-enable-current-column-highlight t)))
#+end_src

** YAML mode
YAML editing improved.

#+begin_src emacs-lisp
  (use-package yaml-mode)
#+end_src

** Yasnippet
[[https://github.com/joaotavora/yasnippet][Visit webpage]].
Expand snippets, making your life easier.

#+begin_src emacs-lisp
  (use-package yasnippet
    :diminish yas-minor-mode
    :config
      (yas-global-mode 1))
#+end_src

As yasnippet doesn't contain any snippets, [[https://github.com/AndreaCrotti/yasnippet-snippets][here]] is an awesome collection!
#+begin_src emacs-lisp
  (use-package yasnippet-snippets
    :defer t)
#+end_src

* Org mode
** Initial config
Install org mode package

#+begin_src emacs-lisp
  (use-package org
    :mode (("\\.org$" . org-mode))
    :ensure org-plus-contrib
    :bind (("C-c l" . org-store-link)
           ("C-c a" . org-agenda)
           ("C-c b" . org-iswitchb)
           ("C-c c" . org-capture))
    :config
    (progn
      ;; Agenda view
      (setq org-agenda-files (quote ("~/org")))

      ;; Archive location
      (setq org-archive-location "archive/%s_archive::")

      ;; Indentation
      (setq org-startup-indented t)
      (setq org-indent-mode t)
      (setq org-catch-invisible-edit 'nil)

      ;; File locations
      (setq org-directory "~/org")
      (setq org-default-notes-file "~/org/refile.org")

      ;; Refile
      (setq org-refile-use-outline-path t)
      (setq org-outline-path-complete-in-steps nil)
      (setq org-refile-allow-creating-parent-nodes (quote confirm))
      (setq org-refile-targets (quote ((nil :maxlevel . 9)
                                       (org-agenda-files :maxlevel . 9))))

      ;; Clock
      (setq org-clock-persist 'history)
      (org-clock-persistence-insinuate)
      (setq org-clock-out-remove-zero-time-clocks t)
      (setq org-log-into-drawer "LOGBOOK")
      (setq org-clock-into-drawer 1)
      (setq org-log-done 'time)

      ;; Todo
      (setq org-clock-in-switch-to-state "STARTED")))
#+end_src

** Capture
Templates for capturing stuff. Same as the todo states defined above.
- A phone call (p)
- A meeting (m)
- A new task (t)
- A new note (n)
- A jounral entry in AAT (j)
- Status meeting (s)
- Email response must be written (r)
- Email todo entry, normal todo with email link (e)

#+begin_src emacs-lisp
  (setq org-capture-templates
        (quote (("t" "Todo" entry (file "~/org/refile.org")
                 "* TODO %?\n")
                ("n" "Note" entry (file "~/org/refile.org")
                 "* %? :NOTE:\n")
                ("m" "Meeting" entry (file "~/org/refile.org")
                 "* MEETING with %? :MEETING:\n")
                ("p" "Phone Call" entry (file "~/org/refile.org")
                 "* PHONE %? :PHONE:\n")
                ("j" "Journal Entry (AAT)" entry (file+datetree "~/org/aat.org")
                 "* %? %T" :empty-lines 0)
                ("s" "Status meeting (AAT)" entry (file+datetree "~/org/aat.org")
                 "* StatusmÃ¸te\n%?" :clock-in t)
                ;; MU4E related templates
                ("r" "Respond to email, must be run from mu4e" entry (file "~/org/refile.org")
                 "* TODO Respond to %:from on %:subject\n\t%a\n" :immediate-finish t)
                ("e" "E-mail todo, must be run from mu4e" entry (file "~/org/refile.org")
                 "* TODO %?\n%a\n")
                )))
#+end_src

** Todo
Todo states can be cycled through with =S-<left>/<right>=.
Custom todo states are defined.

#+begin_src emacs-lisp
  (setq org-todo-keywords
        (quote ((sequence "TODO(t)" "STARTED(s)" "|" "DONE(d)")
                (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "PHONE" "MEETING"))))
#+end_src

This defines different colors for different states.
#+begin_src emacs-lisp
  (setq org-todo-keyword-faces
        (quote (("TODO" :foreground "red" :weight bold)
                ("STARTED" :foreground "blue" :weight bold)
                ("DONE" :foreground "forest green" :weight bold)
                ("WAITING" :foreground "orange" :weight bold)
                ("HOLD" :foreground "magenta" :weight bold)
                ("CANCELLED" :foreground "forest green" :weight bold)
                ("MEETING" :foreground "forest green" :weight bold)
                ("PHONE" :foreground "forest green" :weight bold))))
#+end_src

* Email
Uncomment this to load mu4e configs

#+begin_src emacs-lisp
  (when (executable-find "mu")
    (org-babel-load-file (expand-file-name "mu4e.org" user-emacs-directory)))
#+end_src

* Functions
** Close compilation buffer
Function that closes the compilation buffer if compilation is successful.

#+begin_src emacs-lisp
  (defun bury-compile-buffer-if-successful (buffer string)
    "Bury a compilation buffer if succeeded without warnings "
    (if (and
         (string-match "compilation" (buffer-name buffer))
         (string-match "finished" string)
         (not
          (with-current-buffer buffer
            (search-forward "warning" nil t))))
        (progn
          (run-at-time "2 sec" nil 'winner-undo)
          (message "Build succesful."))
      (progn
        (message "There were warnings or errors."))))

  (add-hook 'compilation-finish-functions 'bury-compile-buffer-if-successful)
#+end_src

** Copy file path to clipboard
Copy path of current file to clipboard.

#+begin_src emacs-lisp
  (defun copy-filename ()
    "Copy the current buffer file name to the clipboard."
    (interactive)
    (let ((filename (if (equal major-mode 'dired-mode)
                        default-directory
                      (buffer-file-name))))
      (when filename
        (kill-new filename)
        (message "Copied buffer file name '%s' to the clipboard." filename))))
#+end_src

** Create non-existant folder
Automatically create folder when visiting a new file.

#+begin_src emacs-lisp
  (defun my-create-non-existent-directory ()
    (let ((parent-directory (file-name-directory buffer-file-name)))
      (when (and (not (file-exists-p parent-directory))
                 (y-or-n-p (format "Directory `%s' does not exist! Create it?" parent-directory)))
        (make-directory parent-directory t))))
  (add-to-list 'find-file-not-found-functions #'my-create-non-existent-directory)
#+end_src

** Find init
Finds the init file and opens it.

#+begin_src emacs-lisp
  (defun find-init-file ()
    "Edit main init file, emacs_init.org."
    (interactive)
    (find-file (expand-file-name "emacs_init.org" user-emacs-directory)))

  (bind-key "C-c I" 'find-init-file)
#+end_src

** Move line up/down
Use M-up/down to move the current line up / downwards.

#+begin_src emacs-lisp
  (defun move-line-up ()
    (interactive)
    (transpose-lines 1)
    (forward-line -2))
  (defun move-line-down ()
    (interactive)
    (forward-line 1)
    (transpose-lines 1)
    (forward-line -1))
  (bind-keys ("M-<up>" . move-line-up)
             ("M-<down>" . move-line-down))
#+end_src

** RBUL summary
Function that sends the summary of a meeting to the people involved.
To use it, mark the heading for the given summary and send it using personal smtp account.

#+begin_src emacs-lisp
  (defun get-string-from-file (filePath)
    "Return filePath's file content."
    (with-temp-buffer
      (insert-file-contents filePath)
      (buffer-string)))

  (defun sf-mail-ref ()
    (interactive)
    (org-html-export-to-html)
    (mu4e-compose-new)
    ;;(search-forward "To:")
    (insert
     (get-string-from-file "/Users/storvik/.emacs.d/sf_mail_list.txt"))
    (search-forward "Subject:")
    (insert (shell-command-to-string "echo -n $(date +%Y-%m-%d)"))
    (insert " FestivalmÃ¸te")
    (next-line)
    (next-line)
    (insert "Hei\n\nHer er referatet fra mÃ¸tet.\n\nLes med mÃ¥te!\n\n")
    (mail-add-attachment "/Users/storvik/org/rbul.html"))
#+end_src

** Reindent buffer
Reindents the entire buffer. Use =C-c /=.

#+begin_src emacs-lisp
  (defun indent-buffer ()
    "Indents an entire buffer using the default intenting scheme."
    (interactive)
    (save-excursion
      (delete-trailing-whitespace)
      (indent-region (point-min) (point-max) nil)
      (if indent-tabs-mode
          ;; Add more modes before/after web-mode
          (if (derived-mode-p 'web-mode)
              (untabify (point-min) (point-max))
            (tabify (point-min) (point-max)))
        (untabify (point-min) (point-max)))))

  (global-set-key (kbd "C-c /") 'indent-buffer)
#+end_src

** Rename current file
Rename the current buffer and file. Thanks to [[http://whattheemacsd.com/][whattheemacsd]].

#+begin_src emacs-lisp
  (defun rename-current-buffer-file ()
    "Renames current buffer and file it is visiting."
    (interactive)
    (let ((name (buffer-name))
          (filename (buffer-file-name)))
      (if (not (and filename (file-exists-p filename)))
          (error "Buffer '%s' is not visiting a file!" name)
        (let ((new-name (read-file-name "New name: " filename)))
          (if (get-buffer new-name)
              (error "A buffer named '%s' already exists!" new-name)
            (rename-file filename new-name 1)
            (rename-buffer new-name)
            (set-visited-file-name new-name)
            (set-buffer-modified-p nil)
            (message "File '%s' successfully renamed to '%s'"
                     name (file-name-nondirectory new-name)))))))

  ;;(global-set-key (kbd "C-x C-r") 'rename-current-buffer-file)
#+end_src

* Daemon
Start emacs server

#+begin_src emacs-lisp
  (server-start)
#+end_src
