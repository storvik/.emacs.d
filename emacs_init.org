#+TITLE: Storviks Emacs Configurations
#+AUTHOR: Petter S. Storvik
#+EMAIL: petterstorvik@gmail.com
#+STARTUP: overview
#+PROPERTY: header-args    :results silent

* Personal information
Add name and E-mail.

#+begin_src emacs-lisp
  (setq user-full-name "Petter S. Storvik"
        user-mail-address "petterstorvik@gmail.com")
#+end_src

* General settings
** System type
Macro for setting different settings for OSX / Linux.
[[https://gist.github.com/beyeran/4118401][Thanks to beyeran]].

#+begin_src emacs-lisp
  (setq sys-unix-p (or (eq system-type 'gnu/linux)
                       (eq system-type 'darwin)))

  (defun sys-type-p (name)
    (eq system-type name))

  (defmacro sys-diversification (gnu/linux &optional darwin win)
     (cond ((sys-type-p 'gnu/linux) gnu/linux)
           ((sys-type-p 'darwin) darwin)
           ((sys-type-p 'windows-nt) win)
           (t nil)))
#+end_src

** Initial settings
Configure load-path to include =~/.emacs.d/elisp/=.

#+begin_src emacs-lisp
  (add-to-list 'load-path (concat user-emacs-directory "elisp/"))
#+end_src

** Coding system
Set coding system before doing anything.
This is taken from [[https://www.masteringemacs.org/article/working-coding-systems-unicode-emacs][MasteringEmacs]] website.

#+begin_src emacs-lisp
  (prefer-coding-system 'utf-8-unix)
  (set-default-coding-systems 'utf-8-unix)
  (set-terminal-coding-system 'utf-8-unix)
  (set-keyboard-coding-system 'utf-8-unix)
#+end_src

** Backup
Change backup location to common dir, =~/.emacs.saves= in emacs directory.

#+begin_src emacs-lisp
  (setq backup-directory-alist
        `((".*" . ,(concat user-emacs-directory "emacs.saves/"))))
  (setq auto-save-file-name-transforms
        `((".*" ,(concat user-emacs-directory "emacs.saves/") t)))
 #+end_src

** [[https://github.com/purcell/exec-path-from-shell][Exec path from shell]]
Use exec-path-from-shell on unix computers.

#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :when sys-unix-p
    :init
    (exec-path-from-shell-initialize))
#+end_src

** Newline
Add newline to end of files.

#+begin_src emacs-lisp
  (setq require-final-newline t)
#+end_src

** Recentf
Number of items to be saved in recent file list.

#+begin_src emacs-lisp
  (setq recentf-max-saved-items 2048)
#+end_src

** Compilation buffer scroll
Make compilation buffer scroll with content.

#+begin_src emacs-lisp
  (setq compilation-scroll-output t)
#+end_src

** Tramp settings
Make tramp auto-save in another local directory.

#+begin_src emacs-lisp
  (require 'tramp)
  (setq tramp-default-method "scp")
  (setq tramp-auto-save-directory (concat user-emacs-directory "tramp.autosave/"))

  (defun storvik/tramp-parse-sconfigs (path)
    (mapcan 'tramp-parse-sconfig
            (directory-files path t "[^\.].+$")))

  (map-put tramp-completion-function-alist-ssh
           'storvik/tramp-parse-sconfigs "~/.ssh/config.d")

  (mapc (lambda (method)
          (tramp-set-completion-function method
           '((tramp-parse-sconfig "/etc/ssh_config")
             (tramp-parse-sconfig "~/.ssh/config")
             (tramp-parse-shosts "~/.ssh/known_hosts")
             (tramp-parse-rhosts "~/.rhosts")
             (tramp-parse-rhosts "~/.shosts")
             (tramp-parse-rhosts "/etc/hosts.equiv")
             (tramp-parse-rhosts "/etc/shosts.equiv")
             (tramp-parse-shosts "/etc/ssh_known_hosts")
             (tramp-parse-sconfig "/etc/ssh_config")
             (storvik/tramp-parse-sconfigs "~/.ssh/config.d"))))
        '("scp" "scpc" "ssh"))

#+end_src

** Whitespace
Delete trailing whitespaces on save.

#+begin_src emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src

* Appearance settings
** Font
Set default font and size.

#+begin_src emacs-lisp
  (set-face-attribute 'default nil :font (sys-diversification
                                           "Ubuntu Mono-11"
                                           "Fira Mono-10"
                                           "Courier New-10"))
#+End_src

** Highlight line mode
Highlight current line.

#+begin_src emacs-lisp
  (when window-system
    (global-hl-line-mode))

  (add-hook 'eshell-mode-hook (lambda ()
                                (setq-local global-hl-line-mode nil)))
#+end_src

** Startup messages
Turn off splash screen and startup message.

#+begin_src emacs-lisp
  (setq inhibit-startup-message t
        initial-scratch-message ""
        inhibit-startup-echo-area-message t)
#+end_src

** Theme
Checks for file =custom_theme.el= and loads file if available.
If not default theme used is =doom-theme-one=.

#+begin_src emacs-lisp
    (let ((storvik/custom-theme-file (concat user-emacs-directory "custom_theme.el")))
      (if (file-exists-p storvik/custom-theme-file)
          (load storvik/custom-theme-file)
        (use-package doom-themes
          :when window-system
          :config
          (load-theme 'doom-one t)
          ;; (doom-themes-visual-bell-config) Removed due to color issued in modeline
          (doom-themes-treemacs-config)
          (doom-themes-org-config))))
#+end_src

** [[https://github.com/seagle0128/doom-modeline][Doom modeline]]
To have icons one must run =M-x all-the-icons-install-fonts=.

#+begin_src emacs-lisp
  (use-package doom-modeline
    :hook (after-init . doom-modeline-mode))
#+end_src

** [[https://github.com/iqbalansari/emacs-emojify][Emojify]]
Display emojis in Emacs!

#+begin_src emacs-lisp
  (use-package emojify
    :hook (after-init . global-emojify-mode))
#+end_src

** [[https://github.com/Fanael/rainbow-delimiters][Rainbow delimiters]]
Added to `prog-mode-hook`.

#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :config
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
#+end_src

** [[https://www.emacswiki.org/emacs/ShowParenMode][Show paren]]
Show paren mode highlights the mathing pair of parentheses.

#+begin_src emacs-lisp
  (show-paren-mode 1)
#+end_src

** [[https://github.com/aspiers/smooth-scrolling][Smooth scrolling]]
Smoother scrolling, with a margin of 5.

#+begin_src emacs-lisp
  (use-package smooth-scrolling
    :config
    (smooth-scrolling-mode 1)
    (setq smooth-scroll-margin 5))
#+end_src

** Tab width
Use tabs, set default tab width to 4.

#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 4)
#+end_src

** Turn off audible bell
Turn off audible and visible bell.

#+begin_src emacs-lisp
  (setq ring-bell-function 'ignore)
#+end_src

** Tool bar modifications
Turn off tool bar and scroll bar. Menu bar is kept on.

#+begin_src emacs-lisp
  (if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
  (if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
  (if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
#+end_src

** Y/N Prompt
Make emacs use y/n instead of yes/no.

#+begin_src emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+end_src

** Unique buffer names
Helps differentiating between buffers with similar / same name.

#+begin_src emacs-lisp
  (require 'uniquify)
#+end_src

* Keybindings
All overrides (key bindings that overrides existing ones) are [[https://stackoverflow.com/questions/683425/globally-override-key-binding-in-emacs][placed in a minor mode]], =storvik/overrides-minor-mode=.
This way it's easy to completely disable all overrides if default behaviour is needed.
Other custom keybindings are placed behind a prefix map, =storvik/prefix-map=, making it easy to maintain and discover using whick-key.
Inspired by [[https://karl-voit.at/2018/07/08/emacs-key-bindings/][this post]].

*Adding keybindings to map can be done the following ways:*

: (bind-key "m w" #'function-name map-name)

or

: (bind-keys
:  :map map-name
:  ("f" . function-name))

or

: (use-package example-package
:   :bind (:map map-name
:         ("f" . function-name)))

** storvik/overrides-minor-mode

#+begin_src emacs-lisp
  (defvar storvik/overrides-minor-mode-map
    (let ((map (make-sparse-keymap)))
      (define-key map (kbd "M-o") 'other-window)
      (define-key map (kbd "RET") 'newline-and-indent)
      map)
    "storvik/overrides-minor-mode keymap.")

  (define-minor-mode storvik/overrides-minor-mode
    "A minor mode so that my key settings override major modes."
    :init-value t
    :lighter " storvik-key-overrides")

  ;; Enable minor mode, maybe it should
  (storvik/overrides-minor-mode 1)

  ;; Disable overrides minor mode in minibuffer
  (defun storvik/overrides-minor-mode-disable-hook ()
    (storvik/overrides-minor-mode 0))

  (add-hook 'minibuffer-setup-hook 'storvik/overrides-minor-mode-disable-hook)
  (add-hook 'eshell-mode-hook 'storvik/overrides-minor-mode-disable-hook)
  (add-hook 'mu4e-headers-mode-hook 'storvik/overrides-minor-mode-disable-hook)
  (add-hook 'magit-post-display-buffer-hook 'storvik/overrides-minor-mode-disable-hook)
  (add-hook 'python-shell-first-prompt-hook 'storvik/overrides-minor-mode-disable-hook)
#+end_src

** storvik/prefix-map

#+begin_src emacs-lisp
  (global-unset-key (kbd "C-c C-SPC"))
  (define-prefix-command 'storvik/prefix-map)

  (use-package bind-key
    :bind (:prefix-map storvik/prefix-map
           :prefix-docstring "Storviks keyboard map"
           :prefix "C-c C-SPC")
    :after org)
#+end_src

** [[http://emacswiki.org/emacs/key-chord.el][Key Chord]]
Key chord, run command when two keys are pressed simultanously.

#+begin_src emacs-lisp
  (use-package key-chord
    :init
    (setq key-chord-two-keys-delay .015
          key-chord-one-key-delay .020)
    (key-chord-mode 1)
    (key-chord-define-global ",u" 'undo)
    (key-chord-define-global ",r" 'redo)
    (key-chord-define-global ",o" 'other-window)
    (key-chord-define-global ",0" 'delete-window)
    (key-chord-define-global ",1" 'delete-other-windows)
    (key-chord-define-global ",2" 'split-window-below)
    (key-chord-define-global ",3" 'split-window-right)
    (key-chord-define-global "xf" 'counsel-find-file)
    (key-chord-define-global "mx" 'counsel-M-x))
#+end_src

use-package key chord extension:

#+begin_src emacs-lisp
  (use-package use-package-chords
    :config (key-chord-mode 1))
#+end_src

** [[https://github.com/Kungsgeten/ryo-modal][Ryo modal]]
RYO modal is a way to define your own modal editing.
I considered [[https://github.com/emacsorphanage/god-mode][god-mode]] but wanting to customize further i decided RYO was the best fit.

#+begin_src emacs-lisp
  (use-package ryo-modal
    :commands ryo-modal-mode
    :bind ("C-S-SPC" . ryo-modal-mode)
    :chords ("kj" . ryo-modal-mode)

    :config
    (ryo-modal-keys
     ("." ryo-modal-repeat)
     ("q" ryo-modal-mode)
     ("n" next-line)
     ("p" previous-line)
     ("l" recenter-top-bottom)
     ("f" forward-word)
     ("b" backward-word)
     ("e" move-end-of-line)
     ("a" back-to-indentation)
     ("y" yank)
     ("d" beginning-of-defun)
     ("D" end-of-defun)
     ("m"
      (("f" forward-char)
       ("b" backward-char)))
     ("w"
      (("W" kill-ring-save :name "Copy selection")))
     ("k"
      (("k" kill-line))))

    (ryo-modal-keys
     ;; First argyment to ryo-modal-keys may be a list of keywords.
     ;; These keywords will be applied to all keybindings.
     (:norepeat t)
     ("0" "M-0")
     ("1" "M-1")
     ("2" "M-2")
     ("3" "M-3")
     ("4" "M-4")
     ("5" "M-5")
     ("6" "M-6")
     ("7" "M-7")
     ("8" "M-8")
     ("9" "M-9")))
#+end_src

** [[https://github.com/justbur/emacs-which-key][Which key mode]]

#+begin_src emacs-lisp
  (use-package which-key
    :no-require t                         ; eval after load
    :config
    ;; Remove ryo:<hash>: prefix
    (which-key-mode)
    (push '((nil . "ryo:.*:") . (nil . "")) which-key-replacement-alist))
#+end_src

* Misc
** [[https://github.com/akermu/emacs-libvterm][vterm]]
vterm is to be considered as unstable atm.
Linux only.

#+begin_src emacs-lisp
  (use-package vterm
    :when (sys-type-p 'gnu/linux)
    :config
    (setq vterm-kill-buffer-on-exit t))
#+end_src

** [[https://github.com/storvik/emacs-lastpass][Lastpass]]
Package used to communicate with LastPass.
Depends on =lpass= command line utility.

#+begin_src emacs-lisp
  (use-package lastpass
    :when (executable-find "lpass")
    :config
    (setq lastpass-user "petterstorvik@gmail.com")
    (lastpass-auth-source-enable))
#+end_src

** [[https://github.com/parkouss/speed-type][Speed type]]
How do I train them fingers?

#+begin_src emacs-lisp
  (use-package speed-type)
#+end_src

** [[https://github.com/fourier/ztree][Ztree]]
Visualize dir trees and run Ediff on folders.
Useful when upgrading between frameworks and such.

#+begin_src emacs-lisp
  (use-package ztree
    :config
    (setq ediff-window-setup-function 'ediff-setup-windows-plain))
#+end_src

* Platform dependant
Load config file dependant on current platform.

** Windows
*** Use git bash on windows
Use git bash on windows if git bash is found, also change path to [[https://emacs.stackexchange.com/questions/29942/projectile-indexing-wont-work-on-windows][ensure that unix tools are preferred]].

#+begin_src emacs-lisp
  (let ((git-bash-executable "C:/Program Files/Git/usr/bin/bash.exe"))
    (when (and (eq system-type 'windows-nt)
               (file-exists-p git-bash-executable))
      (setq explicit-shell-file-name git-bash-executable)
      (setq explicit-sh-args '("-login" "-i"))

      ;; Make sure Unix tools are in front of `exec-path'
      (let ((bash (executable-find "bash")))
        (when bash
          (push (file-name-directory bash) exec-path)))

      ;; Update PATH from exec-path
      (let ((path (mapcar 'file-truename
                          (append exec-path
                                  (split-string (getenv "PATH") path-separator t)))))
        (setenv "PATH" (mapconcat 'identity (delete-dups path) path-separator)))))
#+end_src

** Darwin
*** Ctrl and cmd
Use Ctrl key as control modifier and Cmd as meta modifier.

#+begin_src emacs-lisp
  (when (eq system-type 'darwin)
    (setq mac-command-modifier 'meta)
    (setq mac-control-modifier 'control))
#+end_src

* Terminal specific
** Mouse clicks
Enable mouse clicks in terminal.

#+begin_src emacs-lisp
  (when (not (window-system))
    (xterm-mouse-mode +1))
#+end_src

* [[https://github.com/abo-abo/swiper][Ivy]]
Ivy replaces the heavier Helm package, try it and be amazed!

#+begin_src emacs-lisp
  (use-package counsel
    :bind
    (("M-y" . counsel-yank-pop)
     :map ivy-minibuffer-map
     ("M-y" . ivy-next-line-and-call)))

  (use-package swiper
    :diminish ivy-mode
    :bind (("C-s" . swiper)
           ("M-x" . counsel-M-x)
           ("C-x C-f" . counsel-find-file)
           ("C-c C-r" . ivy-resume)
           ("C-x C-r" . counsel-recentf)
           ("C-c i" . counsel-imenu)
           ("C-c g" . counsel-git)
           ("C-c j" . counsel-git-grep)
           ("C-c k" . counsel-ag)
           ("C-x l" . counsel-locate))
    :config
    (ivy-mode 1)
    (setq ivy-height 10)
    (setq ivy-count-format "")
    (setq ivy-extra-directories nil)    ;; Do not show "./" and "../"
    (setq ivy-virtual-abbreviate 'full) ;; Show full file path
    (setq ivy-use-virtual-buffers t)    ;; Show recently killed buffers
    (setq ivy-use-ignore-default 'always)
    (setq ivy-ignore-buffers '("smex-autoloads.el"
                               "emacs.d/custom.el"))
    (setq ivy-initial-inputs-alist ())
    (setq ivy-re-builders-alist
          '((t	 . ivy--regex-ignore-order))))

  (use-package ivy-hydra)
#+end_src

To enhance the M-x experience, smex must be installed.
#+begin_src emacs-lisp
  (use-package smex)
#+end_src

* Navigation and editing
** [[https://github.com/abo-abo/ace-window][Ace-window]]
Easier window movement, bind it to default other-window =C-x o=.

#+begin_src emacs-lisp
  (use-package ace-window
    :bind (:map storvik/overrides-minor-mode-map ("C-x o" . ace-window))
    :init
    (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)))
#+end_src

** [[https://github.com/abo-abo/avy][Avy]]
Tool for jumping to a given char on the screen.

#+begin_src emacs-lisp
  (use-package avy
    :bind (:map storvik/prefix-map (";" . hydra-avy/body)
                :map storvik/overrides-minor-mode-map ("M-g g" . avy-goto-line))
    :ryo
    ("SPC"
     ((";" hydra-avy/body :name "Avy hydra")))
    ("g"
     (("c" avy-goto-char :name "Goto char")
      ("w" avy-goto-word-1 :name "Goto word")
      ("g" avy-goto-line :name "Goto line")))
    ("w"
     (("l" avy-copy-line :name "Copy line")))
    :config
    (defhydra hydra-avy (:exit t :hint nil)
      "
   Line^^       Region^^        Goto
  ----------------------------------------------------------
   [_y_] yank   [_Y_] yank      [_c_] timed char  [_C_] char
   [_m_] move   [_M_] move      [_w_] word        [_W_] any word
   [_k_] kill   [_K_] kill      [_l_] line        [_L_] end of line"
      ("c" avy-goto-char-timer)
      ("C" avy-goto-char)
      ("w" avy-goto-word-1)
      ("W" avy-goto-word-0)
      ("l" avy-goto-line)
      ("L" avy-goto-end-of-line)
      ("m" avy-move-line)
      ("M" avy-move-region)
      ("k" avy-kill-whole-line)
      ("K" avy-kill-region)
      ("y" avy-copy-line)
      ("Y" avy-copy-region)))
#+end_src

** [[https://github.com/magnars/expand-region.el][Expand region]]
This package expands region by semantic units.

#+begin_src emacs-lisp
  (use-package expand-region
    :bind (:map storvik/prefix-map ("e" . hydra-expand-region/body))
    :ryo
    ("SPC"
     (("e" hydra-expand-region/body :name "Expand region hydra")))
    ("k"
     (("w" er/mark-word :name "Kill word")
      ("d" er/mark-defun :name "Kill defun")
      ("s" er/mark-sentence :name "Kill sentence")
      ("p" er/mark-inside-pairs :name "Kill inside pairs"))
     :name "kill" :then '(kill-region))
    ("w"
     (("w" er/mark-word :name "Copy word")
      ("d" er/mark-defun :name "Copy defun")
      ("s" er/mark-sentence :name "Copy sentence")
      ("p" er/mark-inside-pairs :name "Copy inside pairs"))
     :name "copy" :then '(kill-ring-save
                          deactivate-mark))
    :config
    (defhydra hydra-expand-region (:columns 2 :body-pre (er/expand-region 1))
      "Expand region"
      ("e" er/expand-region "expand")
      ("c" er/contract-region "contract")))
#+end_src

** [[https://github.com/jacktasia/dumb-jump][Dumb jump]]
Used to jump between definitions in almost every language.
Install [[https://github.com/ggreer/the_silver_searcher][thesilversearcher-ag]] on Ubuntu with =apt-get install silversearcher-ag=.

#+begin_src emacs-lisp
  (use-package dumb-jump
    :bind (:map storvik/prefix-map ("d" . hydra-dumb-jump/body))
    :config
    (setq dumb-jump-selector 'ivy)
    (defhydra hydra-dumb-jump (:hint nil)
      "
   Jump^^         Other window^^    Other
  ---------------------------------------------------
   [_j_] go       [_J_] go          [_p_] prompt
   [_e_] external [_E_] external    [_q_] quick look
   [_b_] back"
      ("j" dumb-jump-go)
      ("J" dumb-jump-go-other-window)
      ("e" dumb-jump-go-prefer-external)
      ("E" dumb-jump-go-prefer-external-other-window)
      ("p" dumb-jump-go-prompt)
      ("q" dumb-jump-quick-look)
      ("b" dumb-jump-back)))
#+end_src

** Hyperlinks
Open hyperlinks at point. =C-c B(rowse)=.

#+begin_src emacs-lisp
  (setq browse-url-browser-function (sys-diversification
                                      'browse-url-generic
                                      'browse-url-default-macosx-browser
                                      'browse-url-default-windows-browser)
        browse-url-generic-program "firefox")

  (bind-key "C-c B" 'browse-url-at-point)
#+end_src

** [[https://github.com/emacsfodder/move-text][MoveText]]
Move text up down with =C-c m= followed by =n= or =p=.
Moves region if marked.

#+begin_src emacs-lisp
  (use-package move-text
    :bind (:map storvik/prefix-map ("m" . hydra-move-text/body))
    :ryo
    ("SPC"
     (("m" hydra-move-text/body :name "Move text hydra")))
    :config
    (defhydra hydra-move-text (:hint nil)
      "Move line or region"
      ("p" move-text-up "Up")
      ("n" move-text-down "Down")))
#+end_src

** [[https://endlessparentheses.com/emacs-narrow-or-widen-dwim.html][Narrow dwim]]
This is an awesome function from Endless.

#+begin_src emacs-lisp
  (defun narrow-or-widen-dwim (p)
    "Widen if buffer is narrowed, narrow-dwim otherwise.
  Dwim means: region, org-src-block, org-subtree, or
  defun, whichever applies first. Narrowing to
  org-src-block actually calls `org-edit-src-code'.

  With prefix P, don't widen, just narrow even if buffer
  is already narrowed."
    (interactive "P")
    (declare (interactive-only))
    (cond ((and (buffer-narrowed-p) (not p)) (widen))
          ((region-active-p)
           (narrow-to-region (region-beginning)
                             (region-end)))
          ((derived-mode-p 'org-mode)
           ;; `org-edit-src-code' is not a real narrowing
           ;; command. Remove this first conditional if
           ;; you don't want it.
           (cond ((ignore-errors (org-edit-src-code) t)
                  (delete-other-windows))
                 ((ignore-errors (org-narrow-to-block) t))
                 (t (org-narrow-to-subtree))))
          ((derived-mode-p 'latex-mode)
           (LaTeX-narrow-to-environment))
          (t (narrow-to-defun))))

  (bind-key "n" #'narrow-or-widen-dwim storvik/prefix-map)
  (ryo-modal-keys ("SPC" (("n" narrow-or-widen-dwim :name "Narrow DWIM"))))
#+end_src

** [[https://github.com/Alexander-Miller/treemacs][Treemacs]]
Treemacs is useful for navigating projects.

#+begin_src emacs-lisp
  (use-package treemacs
    :defer t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (progn
      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode t)
      (pcase (cons (not (null (executable-find "git")))
                   (not (null (executable-find "python3"))))
        (`(t . t)
         (treemacs-git-mode 'deferred))
        (`(t . _)
         (treemacs-git-mode 'simple))))
    :bind
    (:map global-map
          ("M-0"       . treemacs-select-window)
          ("C-x t 1"   . treemacs-delete-other-windows)
          ("C-x t t"   . treemacs)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag)))

  (use-package treemacs-projectile
    :after treemacs projectile)

  (use-package treemacs-magit
    :after treemacs magit)
#+end_src

** [[https://github.com/magnars/multiple-cursors.el][Multiple cursors]]
Multiple cursors is an awesome package thats makes editing multiple entries with similar structure a breeze.
This awesome hydra is stolen from [[https://github.com/abo-abo/hydra/wiki/multiple-cursors][hydra wiki]].

#+begin_src emacs-lisp
  (use-package multiple-cursors
    :bind (:map storvik/prefix-map ("c" . hydra-multiple-cursors/body))
    :ryo
    ("SPC"
     (("c" hydra-multiple-cursors/body :name "Multiple cursors hydra")))
    :config
    (defhydra hydra-multiple-cursors (:hint nil)
      "
   Up^^             Down^^           Miscellaneous           % 2(mc/num-cursors) cursor%s(if (> (mc/num-cursors) 1) \"s\" \"\")
  ------------------------------------------------------------------
   [_p_]   Next     [_n_]   Next     [_l_] Edit lines  [_0_] Insert numbers
   [_P_]   Skip     [_N_]   Skip     [_a_] Mark all    [_A_] Insert letters
   [_M-p_] Unmark   [_M-n_] Unmark   [_s_] Search
   [Click] Cursor at point       [_q_] Quit"
      ("l" mc/edit-lines :exit t)
      ("a" mc/mark-all-like-this :exit t)
      ("n" mc/mark-next-like-this)
      ("N" mc/skip-to-next-like-this)
      ("M-n" mc/unmark-next-like-this)
      ("p" mc/mark-previous-like-this)
      ("P" mc/skip-to-previous-like-this)
      ("M-p" mc/unmark-previous-like-this)
      ("s" mc/mark-all-in-region-regexp :exit t)
      ("0" mc/insert-numbers :exit t)
      ("A" mc/insert-letters :exit t)
      ("<mouse-1>" mc/add-cursor-on-click)
      ;; Help with click recognition in this hydra
      ("<down-mouse-1>" ignore)
      ("<drag-mouse-1>" ignore)
      ("q" nil)))
#+end_src

* Language
Set default ispell language to English.

#+begin_src emacs-lisp
  (setq ispell-dictionary "en")
#+end_src

* [[https://magit.vc/][Magit]]
Brilliant interface to git.

#+begin_src emacs-lisp
  (use-package magit
    :demand t
    :when (executable-find "git")
    :bind (:map storvik/prefix-map
           ("g" . magit-status)
           :map magit-status-mode-map
           ("TAB" . magit-section-toggle)
           ("<C-tab>" . magit-section-cycle))
    :config
    (setq magit-completing-read-function 'ivy-completing-read)
    (setq magit-git-executable "git"))
#+end_src

** [[https://github.com/alphapapa/magit-todos][Magit todos]]
Shows todo in magit buffers.

#+begin_src elisp
  (use-package magit-todos
    :after magit
    :hook (after-init . magit-todos-mode))
#+end_src

* [[https://github.com/bbatsov/projectile][Projectile]]
Projectile simplifies navigation and structuring on large projects.
Git folders are identified as projects, other projects have to have an empty =.projectile=-file to be categorized as project.
=:demant t= overrides defered loading in order to make =projectile-mode= enabled before projectile commands are called for the first time.

#+begin_src emacs-lisp
  (use-package projectile
    :demand t
    :bind-keymap ("C-c p" . projectile-command-map)
    :ryo
    (:mode 'projectile-mode)
    ("c"
     (("p" "C-c p" :name "projectile prefix")))
    :commands (projectile-project-p)
    :config
    (setq projectile-completion-system 'ivy
          projectile-enable-caching t
          projectile-globally-ignored-directories (append '("node_modules"
                                                            ".git"
                                                            ".gomod"
                                                            ".ccls-cache")))
    (projectile-mode +1))
#+end_src

* Eshell
SSH with =cd /ssh:remote-server:=.

** Alias

#+begin_src emacs-lisp
  (defun eshell/ll (&rest args)
    "Alias ll -> ls -l"
    (apply #'eshell/ls (cons '-l args)))

  (defun eshell/clc ()
    "Clear the eshell buffer."
    (eshell/clear-scrollback))
#+end_src

** Prompt
Custom prompt inspired by [[http://www.modernemacs.com/post/custom-eshell/][this post]].

#+begin_src emacs-lisp
  (defun storvik/eshell-fishy-path (path)
    "Takes eshell path and makes it fishy."
    (let ((pathlist (split-string (replace-regexp-in-string
                                   (file-truename "~") "~" path) "/")))
      (concat (string-join (mapcar (lambda (el)
                                     (unless (= (length el) 0)
                                       (substring el 0 1)))
                                   (butlast pathlist 1))
                           "/")
              (unless (and (eq (length pathlist) 1)
                           (string= (car pathlist) "~"))
                "/")
              (car (last pathlist)))))

  (defun storvik/eshell-prompt-function ()
    "Custom eshell prompt function."
    (concat
     (if (file-remote-p default-directory)
         (propertize (file-remote-p default-directory)
                     'face font-lock-keyword-face)
       (concat (propertize user-login-name 'face font-lock-function-name-face)
               "@"
               (propertize system-name 'face font-lock-keyword-face)))
     (propertize (concat "  "
                         (storvik/eshell-fishy-path (eshell/pwd)))
                 'face font-lock-string-face)
     (when (magit-get-current-branch)
       (propertize (concat " ( "
                           (magit-get-current-branch)
                           ")")
                   'face font-lock-comment-face))
     "> "))

  (setq eshell-prompt-function 'storvik/eshell-prompt-function)
  (setq eshell-prompt-regexp "[a-zA-Z0-9-_@:/]+\\ \\ [a-zA-Z0-9-_/~]+\\( \( [a-zA-Z0-9-_@/.]+\)\\)*>\\ ")
#+end_src

** Buffer names
Custom buffer names =*eshell*<path/to/eshell>=.

#+begin_src emacs-lisp
  (defun storvik/eshell-rename-buffer ()
    "Rename buffer based on path."
    (interactive)
    (rename-buffer (concat "*eshell*<"
                           (replace-regexp-in-string
                            (file-truename "~") "~" (eshell/pwd))
                           ">") t))

  (add-hook 'eshell-mode-hook 'storvik/eshell-rename-buffer)
  (add-hook 'eshell-directory-change-hook 'storvik/eshell-rename-buffer)
#+end_src

* Programming
** [[http://company-mode.github.io/][Autocomplete]]
Company mode autocomplete.

#+begin_src emacs-lisp
  (use-package company
    :defer t
    :bind (:map storvik/overrides-minor-mode-map ("C-;" . company-complete-common))
    :diminish company-mode
    :init
    (global-company-mode t)
    :config
    (setq company-idle-delay              0.0
          company-minimum-prefix-length   1
          company-show-numbers            t
          company-tooltip-limit           20
          company-dabbrev-downcase        nil)
    (setq company-global-modes '(not eshell-mode shell-mode))
    (setq company-backends (delete 'company-clang company-backends)))

  ;; Disable company if remote session
  ;; Should be added to relevant hooks
  (defun storvik/company-disable-if-remote ()
    (when (and (fboundp 'company-mode)
               (file-remote-p default-directory))
      (company-mode -1)))
#+end_src

** [[https://github.com/flycheck/flycheck][Flycheck]]
Flycheck is a programming grammar checker.
It includes on the fly function lookup and syntax validation.

#+begin_src emacs-lisp
  (use-package flycheck
    :defer t
    :init
    ;;(add-hook 'prog-mode-hook #'flycheck-mode)
    :commands flycheck-mode)
#+end_src

** [[https://github.com/emacs-lsp/lsp-mode][Language Server Protocol]]
Language server protocol support.

Some performance enhancing settings, see lsp-mode README.md for details.

#+begin_src emacs-lisp
  (setq gc-cons-threshold 100000000)
  (setq read-process-output-max (* 1024 1024)) ;; 1mb
#+end_src

#+begin_src emacs-lisp
  (use-package lsp-mode
    :bind-keymap ("C-c l" . lsp-command-map)
    :ryo
    (:mode 'lsp-mode)
    ("c"
     (("l" "C-c l" :name "lsp prefix")))
    :init
    (setq lsp-keymap-prefix "C-c l"
          lsp-prefer-capf t     ;; for performance, see lsp-mode readme
          lsp-prefer-flymake nil
          lsp-auto-execute-action nil
          lsp-enable-indentation nil))

  (use-package lsp-ui
    :commands lsp-ui-mode
    :init
    (setq lsp-ui-doc-position 'top))

  (use-package lsp-ivy
    :commands lsp-ivy-workspace-symbol)

  (use-package lsp-treemacs
    :after treemacs lsp
    :commands lsp-treemacs-errors-list)
#+end_src

** [[https://github.com/wbolster/emacs-direnv][Direnv]]
Direnv changes environments if =.envrc= is present.

#+begin_src emacs-lisp
  (use-package direnv
    :config
    (direnv-mode))
#+end_src

** [[https://www.gnu.org/software/auctex/][Auctex]]
Auctex is the best way editing LaTeX documents!
#+begin_src emacs-lisp
  (use-package tex
    :straight auctex
    :config
    (setq TeX-auto-save t)
    (setq TeX-parse-self t)
    (setq-default TeX-master nil)
    (add-hook 'LaTeX-mode-hook 'flyspell-mode)      ;; Enable flyspell as default
    (add-hook 'LaTeX-mode-hook 'turn-on-reftex)     ;; Enable reftex as default
    (setq reftex-plug-into-AUCTeX t)
    (setq TeX-PDF-mode t)                           ;; Enable PDF mode

    ;; Use Skim as default pdf viewer
    ;; Skim's displayline is used for forward search (from .tex to .pdf)
    ;; option -b highlights the current line; option -g opens Skim in the background
    (setq TeX-view-program-selection '((output-pdf "PDF Viewer")))
    (setq TeX-view-program-list
          ;;(sys-diversification
          ;; '(("PDF Viewer" "/Applications/Skim.app/Contents/SharedSupport/displayline -b -g %n %o %b"))
          ;; "/usr/share/emacs/site-lisp/mu4e")))
          '(("PDF Viewer" "/Applications/Skim.app/Contents/SharedSupport/displayline -b -g %n %o %b"))))

  ;; Use aspell
  (add-to-list 'exec-path "/usr/local/bin")
  (setq ispell-program-name "aspell")
  (setq ispell-list-command "--list")
#+end_src

I use LatexMk to compile my latex documents. Replace default latex command with LatexMk.

#+begin_src emacs-lisp
  (use-package auctex-latexmk
    :config
    (auctex-latexmk-setup)
    (setq auctex-latexmk-inherit-TeX-PDF-mode t)
    (add-hook 'TeX-mode-hook '(lambda ()
                              (setq TeX-command-default "LatexMk"))))
#+end_src

** C/C++
*** [[https://github.com/MaskRay/ccls][LSP server ccls]]
Setup =lsp= =ccls= support and add hooks.

#+begin_src emacs-lisp
  (let ((storvik/ccls-exec (or (executable-find "ccls")
                               (sys-diversification "~/developer/ccls/Release/ccls"
                                                    "~/developer/ccls/Release/ccls"
                                                    "~/../../developer/ccls/Release/ccls.exe"))))
    (use-package ccls
      :when (file-exists-p storvik/ccls-exec)
      :hook ((c-mode c++-mode objc-mode) .
             (lambda () (require 'ccls) (lsp)))
      :config (setq ccls-executable storvik/ccls-exec)))
#+end_src

**** Windows installation

Windows installation using git bash, ninja and mingw64 with gcc 7.3.0-posix-seh-rev0 was done my running the following:

#+begin_src shell
  git clone --depth=1 --recursive https://github.com/MaskRay/ccls
  cd ccls

  git clone https://git.llvm.org/git/llvm.git
  git clone https://git.llvm.org/git/clang.git llvm/tools/clang
  cd llvm

  cmake -H. -BRelease -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++ -DLLVM_TARGETS_TO_BUILD=X86
  ninja -C Release clang clangFormat clangFrontendTool clangIndex clangTooling

  cd ../
  cmake -H. -BRelease -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_COMPILER=clang++ \
       -DCMAKE_PREFIX_PATH="$pwd/llvm/Release;$pwd/llvm/Release/tools/clang;$pwd/llvm;$pwd/llvm/tools/clang" \
       -DCMAKE_CXX_FLAGS="-target x86_64-pc-windows-gnu" \
       -DCMAKE_CXX_FLAGS=-D__STDC_FORMAT_MACROS
  ninja -C Release
#+end_src
- =$pwd= should be path to current dir, seems like ut must start with =C:/= and not msys style =/c/=
- =-target x86_64-pc-windows-gnu= makes clang use gcc headers instead of visual studio headers
- =-D__STDC_FORMAT_MACROS= is to make mingw define =PRIu64=

*** CUDA files
Associate .cu files with c-mode

#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.cu\\'" . c-mode))
#+end_src

*** Default indentation
Set default indentation to 4.

#+begin_src emacs-lisp
  (defun my-c-mode-common-hook ()
      (c-set-offset 'substatement-open 0)
      ;;(setq c++-tab-always-indent nil)
      (setq c-basic-offset 4)
      (setq c-indent-level 4)
      (setq tab-stop-list '(4 8 12 16 20 24 28 32 36 40 44 48 52 56 60))
      (setq tab-width 4))
  (add-hook 'c-mode-common-hook 'my-c-mode-common-hook)
#+end_src

*** Custom compile command
This custom compile command setup detects wether to use cmake or make.
When using cmake it prompts for cmake, ninja or any other self written command.
cmake and ninja are run in =build/= dir.

#+begin_src emacs-lisp
  (defvar storvik/compile-history '()
    "List containing compile history.")

  (defun storvik/cmake-compile ()
    (let ((compile-cmd (completing-read "Run cmake or ninja: " (append storvik/compile-history '(ninja cmake)) nil nil)))
      (with-temp-buffer
      (cond ((string= compile-cmd "cmake")
             (let ((default-directory
                     (if sys-unix-p
                         (projectile-project-root)
                       (concat (projectile-project-root) "/build/"))))
               (compile (if sys-unix-p
                            "cmake -G Ninja -B build ."
                          "cmake -G Ninja .."))))
             ((string= compile-cmd "ninja")
              (let ((default-directory (concat (projectile-project-root) "/build/")))
                (compile "ninja")))
             (t (let ((default-directory (projectile-project-root)))
               (add-to-list 'storvik/compile-history compile-cmd)
               (compile compile-cmd)))))))

  (defun storvik/c-mode-compile-setup ()
    (when (projectile-project-p)
      (let ((default-directory (projectile-project-root)))
        (if (file-exists-p "CMakeLists.txt")
            ;; Cmake project run cmake compile function
            (set (make-local-variable 'compile-command) `(storvik/cmake-compile))
          ;; Not a cmake project, use `make all`
          (set (make-local-variable 'compile-command) "make all")))))

  (add-hook 'c-mode-hook 'storvik/c-mode-compile-setup)
  (add-hook 'c++-mode-hook 'storvik/c-mode-compile-setup)
#+end_src

*** [[https://github.com/storvik/emacs-astyle][Astyle]]
Run astyle on save, this should be changed when package is in MELPA.

#+begin_src emacs-lisp
  (use-package astyle
    :when (executable-find "astyle")
    :hook (c-mode-common . astyle-on-save-mode)
    :config
    (setq astyle-custom-args '("--pad-oper"
                              "--pad-header"
                              "--break-blocks"
                              "--align-pointer=type"
                              "--align-reference=name")))
#+end_src

** [[https://github.com/Kitware/CMake/blob/master/Auxiliary/cmake-mode.el][CMake mode]]
CMake mode to edit files related to cmake.

#+begin_src emacs-lisp
  (use-package cmake-mode
    :when (executable-find "cmake"))
#+end_src

** [[http://www.emacswiki.org/emacs/CsvMode][CSV mode]]
Prettify csv files.

#+begin_src emacs-lisp
  (use-package csv-mode)
#+end_src

** Dart

I mainly use dart when programming with Flutter.

*** [[https://github.com/bradyt/dart-mode][Dart mode]]
Major mode for editing dart files.

#+begin_src emacs-lisp
  (use-package dart-mode)
#+end_src

*** [[https://github.com/emacs-lsp/lsp-dart][lsp-dart]]
Setup lsp-dart, thanks to [[https://github.com/ericdallo/dotfiles/blob/master/.doom.d/config.el#L150-L155][ericdallo]] for the snippet in :config.

#+begin_src emacs-lisp
  (use-package lsp-dart
    :hook (dart-mode . lsp))
#+end_src

** [[https://github.com/spotify/dockerfile-mode][Dockerfile mode]]
Simple syntax highlightning for Docker containers.

#+begin_src emacs-lisp
  (use-package dockerfile-mode)
#+end_src

** Elisp
*** [[https://github.com/purcell/package-lint][Package lint]]
Linter for Emacs packages meta data.

#+begin_src emacs-lisp
  (use-package package-lint)
#+end_src

** [[https://github.com/smihica/emmet-mode][Emmet mode]]
Emmet-mode to expand classes to markup.
Use =emmet-expand-line= to do this.

#+begin_src emacs-lisp
  (use-package emmet-mode
    :hook (web-mode sgml-mode)
    :config
    (setq emmet-expand-jsx-className? t))
#+end_src

** [[https://github.com/wwwjfy/emacs-fish/][Fish mode]]
   Edit fish shell files.

#+begin_src emacs-lisp
  (use-package fish-mode)
#+end_src

** Fixme/Todo Highlights
Highlights fixme and todo in comments.

#+begin_src emacs-lisp
  (defun font-lock-comment-annotations ()
    "Highlight a bunch of well known comment annotations.
     This functions should be added to the hooks of major modes for programming."
    (font-lock-add-keywords
     nil '(("\\<\\(FIX\\(ME\\)?\\|TODO\\|OPTIMIZE\\|HACK\\|REFACTOR\\):"
            1 font-lock-warning-face t))))

  (add-hook 'prog-mode-hook 'font-lock-comment-annotations)
#+end_src

** Go
*** [[https://github.com/dominikh/go-mode.el][Go mode]]
Major mode for Go.

Install dependencies and useful go stuff by running:
#+begin_src shell
  go get -u golang.org/x/lint/golint && \
	go get -u golang.org/x/tools/cmd/... && \
	go get -u github.com/kisielk/errcheck
#+end_src


#+begin_src emacs-lisp
  (use-package go-mode
    :when (executable-find "go")
    :init
    (setq gofmt-command "goimports")
    (add-hook 'before-save-hook 'gofmt-before-save))
#+end_src

*** LSP
To install lsp support for Go gopls must be installed:
=GO111MODULE=on go get golang.org/x/tools/gopls@latest=

#+begin_src emacs-lisp
  (add-hook 'go-mode-hook 'lsp)
#+end_src

*** [[https://github.com/syohex/emacs-go-add-tags][Go add tags]]
Lets you add json tags to structs calling =go-add-tags=.

#+begin_src emacs-lisp
  (use-package go-add-tags
    :requires go-mode
    :when (executable-find "go"))
#+end_src

*** [[https://github.com/benma/go-dlv.el][Go dlv]]
Go debugger integration, uses delve.

#+begin_src emacs-lisp
  (use-package go-dlv
    :requires go-mode
    :when (executable-find "go"))
#+end_src

*** [[https://github.com/dominikh/go-mode.el][Go guru]]

#+begin_src emacs-lisp
  (use-package go-guru
    :requires go-mode)
#+end_src

*** [[https://github.com/samertm/go-stacktracer.el][Go stacktrace]]
Jump around go stacktrace, use =M-x=  =go-stacktracer-region=.

#+begin_src emacs-lisp
  (use-package go-stacktracer
    :requires go-mode)
#+end_src

*** [[https://github.com/nlamirault/gotest.el][Gotest]]
Run test files.

#+begin_src emacs-lisp
  (use-package gotest
    :requires go-mode)
#+end_src

*** [[https://github.com/storvik/gomacro-mode][gomacro-mode]]
Mode for interacting with gomacro REPL.

#+begin_src emacs-lisp
  (use-package gomacro-mode
    :requires go-mode
    :hook (go-mode . gomacro-mode))
#+end_src

** [[https://github.com/abo-abo/lispy][Lispy]]
Lispy mode for editing listpy languages, elisp, common lisp, clojure, etc.

#+begin_src emacs-lisp
  (use-package lispy
    :defer t
    :hook ((emacs-lisp-mode . (lambda () (lispy-mode 1)))
           (sly-mode . (lambda () (lispy-mode 1)))))
#+end_src

** [[https://sourceforge.net/projects/matlab-emacs/][Matlab]]
Major mode for editing matlab `.m` files.

#+begin_src emacs-lisp
  (use-package matlab
    :straight matlab-mode)
#+end_src

** Markdown
*** [[http://jblevins.org/projects/markdown-mode/][Markdown mode]]
Mode to edit markdown files more efficiently.

#+begin_src emacs-lisp
  (use-package markdown-mode
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . gfm-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command (concat "pandoc -f gfm --standalone --highlight-style kate --metadata title=\"MarkdownPreview\" --css "
                                         (file-truename user-emacs-directory)
                                         "pandoc.css")))
#+end_src

*** [[https://github.com/ardumont/markdown-toc][Markdown toc]]
Generate toc with `markdown-toc-generate-toc`.

#+begin_src emacs-lisp
  (use-package markdown-toc)
#+end_src

*** [[https://github.com/ancane/markdown-preview-mode][Markdown preview]]
Preview markdown files, =pandoc= must be installed, with =markdown-preview=.

#+begin_src emacs-lisp
  (use-package markdown-preview-mode
    :when (executable-find "pandoc"))
#+end_src

** [[https://github.com/wentasah/meson-mode][Meson mode]]
Mode for editing meson build files.

#+begin_src elisp
  (use-package meson-mode)
#+end_src

** [[https://github.com/ajc/nginx-mode][Nginx mode]]
Nginx mode for editing Nginx config files.

#+begin_src emacs-lisp
  (use-package nginx-mode)
#+end_src

** Nix

*** [[https://github.com/NixOS/nix-mode][Nix-mode]]
Mode for editing =.nix= files.

#+begin_src emacs-lisp
  (use-package nix-mode
    :mode "\\.nix\\'")
#+end_src

*** [[https://github.com/purcell/emacs-nixpkgs-fmt][nixpgs-fmt]]
nixpgs formatter.

#+begin_src emacs-lisp
  (use-package nixpkgs-fmt
    :hook (nix-mode . nixpkgs-fmt-on-save-mode))
#+end_src

*** [[https://github.com/jwiegley/nix-update-el][nix-update]]
Update rev/sha from Emacs.

#+begin_src emacs-lisp
  (use-package nix-update)
#+end_src

** [[https://github.com/jschaf/powershell.el][Powershell]]
Edit powershell scripts.

#+begin_src elisp
  (use-package powershell)
#+end_src

** [[https://github.com/protocolbuffers/protobuf][Protobuf mode]]
Protobuf-mode to edit protobuf files.

#+begin_src emacs-lisp
  (use-package protobuf-mode)
#+end_src

** Python
*** [[https://emacs-lsp.github.io/lsp-pyright/][lsp-pyright]]
Decided to try Microsoft [[https://github.com/microsoft/pyright][pyright]] lsp server.
Depends on a never nodejs installation.

#+begin_src emacs-lisp
  (use-package lsp-pyright
    :hook (python-mode . (lambda ()
                           (require 'lsp-pyright)
                           (lsp))))
#+end_src

*** [[https://github.com/jorgenschaefer/pyvenv][pyvenv.el]] handles virtual environments in Emacs.
Use =M-x pyvenv-activate= to activate environment.

#+begin_src emacs-lisp
  (use-package pyvenv)
#+end_src

** [[https://github.com/joaotavora/sly][SLY]]
SLY is a [[https://github.com/slime/slime][Slime]] fork with lots of improvements!
To choose between multiple lisps use =C-- M-x sly=.

#+begin_src emacs-lisp
  (use-package sly
    :when (or (executable-find "sbcl")
              (executable-find "ecl"))
    :init
    (cond ((and (executable-find "sbcl")
                (executable-find "ecl"))
           (setq sly-lisp-implementations
                 '((sbcl ("sbcl" "--noinform") :coding-system utf-8-unix)
                   (ecl ("ecl")))))
          ((executable-find "sbcl")
           (setq inferior-lisp-program "sbcl --noinform"))
          ((executable-find "ecl")
           (setq inferior-lisp-program "ecl")))
    (add-hook 'sly-mode-hook
              (lambda ()
                (setq-local lispy-no-space t))))

  (use-package sly-quicklisp
    :requires sly)

  (use-package sly-asdf
    :requires sly)
#+end_src

** SQL mode
Bind file extentions to sql mode.

#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.create\\'" . sql-mode))
  (add-to-list 'auto-mode-alist '("\\.drop\\'" . sql-mode))
  (add-to-list 'auto-mode-alist '("\\.alter\\'" . sql-mode))
#+end_src

Function to capitalize SQL keywords

#+begin_src emacs-lisp
  (defun point-in-comment ()
    (let ((syn (syntax-ppss)))
      (and (nth 8 syn)
           (not (nth 3 syn)))))

  (defun my-upcase-all-sql-keywords ()
    (interactive)
    (require 'sql)
    (save-excursion
      (dolist (keywords sql-mode-mysql-font-lock-keywords)
        (goto-char (point-min))
        (while (re-search-forward (car keywords) nil t)
          (unless (point-in-comment)
            (goto-char (match-beginning 0))
            (upcase-word 1))))))

  ;;(add-hook 'sql-mode-hook
  ;;          (lambda ()
  ;;            (add-hook 'before-save-hook 'my-upcase-all-sql-keywords nil 'make-it-local)))
#+end_src

** [[https://github.com/holomorph/systemd-mode][Systemd mode]]
Edit systemd files with syntax highlightning.

#+begin_src emacs-lisp
  (use-package systemd)
#+end_src

** [[http://web-mode.org/][Web mode]]
Works with php files with html and js.

#+begin_src emacs-lisp
  (use-package web-mode
    :init
    (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.php?\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.css?\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.js?\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.vue?\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.sass?\\'" . web-mode))
    (setq web-mode-content-types-alist
          '(("jsx" . "\\.js[x]?\\'")
            ("jsx" . "\\.sass?\\'")))
    (setq-default web-mode-markup-indent-offset 2)
    (setq-default web-mode-css-indent-offset 4)
    (setq-default web-mode-code-indent-offset 4)
    (setq-default web-mode-sql-indent-offset 4)
    (setq web-mode-enable-current-column-highlight t))
#+end_src

** [[https://github.com/yoshiki/yaml-mode][YAML mode]]
YAML editing improved.

#+begin_src emacs-lisp
  (use-package yaml-mode)
#+end_src

** [[https://github.com/joaotavora/yasnippet][Yasnippet]]
Expand snippets, making your life easier.

#+begin_src emacs-lisp
  (use-package yasnippet
    :diminish yas-minor-mode
    :config
      (yas-global-mode 1))
#+end_src

As yasnippet doesn't contain any snippets, [[https://github.com/AndreaCrotti/yasnippet-snippets][here]] is an awesome collection!
#+begin_src emacs-lisp
  (use-package yasnippet-snippets
    :defer t)
#+end_src

* Org mode
** Initial config
Install org mode package

#+begin_src emacs-lisp
  ;; Archive location
  (setq org-archive-location "archive/%s_archive::")

  ;; Indentation
  (setq org-startup-indented t)
  (setq org-indent-mode t)
  (setq org-adapt-indentation t)
  (setq org-catch-invisible-edit 'nil)

  ;; File locations
  (setq org-directory "~/org")
  (setq org-default-notes-file "~/org/refile.org")
  (setq org-agenda-files (append (file-expand-wildcards (concat org-directory "*.org"))
                                 (file-expand-wildcards (concat org-directory "*/*.org"))
                                 (file-expand-wildcards (concat org-directory "*/*/*.org"))))

  ;; Refile
  (setq org-refile-use-outline-path t)
  (setq org-outline-path-complete-in-steps nil)
  (setq org-refile-allow-creating-parent-nodes (quote confirm))
  (setq org-refile-targets (quote ((nil :maxlevel . 9)
                                   (org-agenda-files :maxlevel . 9))))

  ;; Clock
  (setq org-clock-persist 'history)
  (org-clock-persistence-insinuate)
  (setq org-clock-out-remove-zero-time-clocks t)
  (setq org-log-into-drawer "LOGBOOK")
  (setq org-clock-into-drawer 1)
  (setq org-log-done 'time)

  ;; Todo
  ; (setq org-clock-in-switch-to-state "STARTED")
#+end_src

** [[https://github.com/sabof/org-bullets][Bullets]]

#+begin_src emacs-lisp
  (use-package org-bullets
    :hook (org-mode . org-bullets-mode))
#+end_src

** Capture
Capture templates and such

#+begin_src emacs-lisp
  (setq org-capture-templates
        (quote (("t" "Todo" entry (file "~/org/refile.org")
                 "* TODO %?\n")
                ("c" "Todo code" entry (file "~/org/refile.org")
                 "* TODO %?\n%l\n")
                ("n" "Note" entry (file "~/org/refile.org")
                 "* %? :NOTE:\n")
                ("m" "Meeting" entry (file "~/org/refile.org")
                 "* MEETING %t %? :MEETING:\n" :clock-in t :clock-resume t)
                ("p" "Phone Call" entry (file "~/org/refile.org")
                 "* PHONE %T %? :PHONE:\n" :clock-in t :clock-resume t)
                ("r" "Respond to email, must be run from mu4e" entry (file "~/org/refile.org")
                 "* TODO Respond to %:from on %:subject\n\t%a\n" :immediate-finish t)
                ("e" "E-mail todo, must be run from mu4e" entry (file "~/org/refile.org")
                 "* TODO %?\n%a\n")
                )))
#+end_src

** Todo
Todo states can be cycled through with =S-<left>/<right>=.
Custom todo states are defined.

#+begin_src emacs-lisp
  (setq org-todo-keywords
        (quote ((sequence "TODO(t)" "STARTED(s)" "|" "DONE(d)")
                (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "PHONE" "MEETING"))))
#+end_src

This defines different colors for different states.
#+begin_src emacs-lisp
  (setq org-todo-keyword-faces
        (quote (("TODO" :foreground "red" :weight bold)
                ("STARTED" :foreground "blue" :weight bold)
                ("DONE" :foreground "forest green" :weight bold)
                ("WAITING" :foreground "orange" :weight bold)
                ("HOLD" :foreground "magenta" :weight bold)
                ("CANCELLED" :foreground "forest green" :weight bold)
                ("MEETING" :foreground "forest green" :weight bold)
                ("PHONE" :foreground "forest green" :weight bold))))
#+end_src

** [[https://orgmode.org/worg/exporters/koma-letter-export.html][Koma letter]]
Use org-mode to write letters.

#+begin_src emacs-lisp
  (eval-after-load 'ox '(require 'ox-koma-letter))
  (eval-after-load 'ox-latex
    '(add-to-list 'org-latex-packages-alist '("AUTO" "babel" t) t))
#+end_src

** [[https://org-roam.readthedocs.io][Org-roam]]

#+begin_src emacs-lisp
    (use-package org-roam
      :when (executable-find "sqlite3")
      :hook
      (after-init . org-roam-mode)
      :custom
      (org-roam-directory (concat org-directory "/roam"))
      :bind
      (:map org-roam-mode-map
            (("C-c n l" . org-roam)
             ("C-c n f" . org-roam-find-file)
             ("C-c n j" . org-roam-jump-to-index)
             ("C-c n b" . org-roam-switch-to-buffer)
             ("C-c n g" . org-roam-graph))
            :map org-mode-map
            (("C-c n i" . org-roam-insert))))

  (use-package deft
    :after org
    :bind
    ("C-c n d" . deft)
    :custom
    (deft-recursive t)
    (deft-use-filter-string-for-filename t)
    (deft-default-extension "org")
    (deft-directory (concat org-directory "/roam")))

#+end_src

* Email
Uncomment this to load mu4e configs

#+begin_src emacs-lisp
  (when (and (executable-find "mu")
             (file-exists-p (expand-file-name "mu4e.org" "~/config")))
    (org-babel-load-file (expand-file-name "mu4e.org" "~/config")))
#+end_src

* Functions
** Copy file path to clipboard
Copy path of current file to clipboard.

#+begin_src emacs-lisp
  (defun copy-filename ()
    "Copy the current buffer file name to the clipboard."
    (interactive)
    (let ((filename (if (equal major-mode 'dired-mode)
                        default-directory
                      (buffer-file-name))))
      (when filename
        (kill-new filename)
        (message "Copied buffer file name '%s' to the clipboard." filename))))
#+end_src

** Create non-existant folder
Automatically create folder when visiting a new file.

#+begin_src emacs-lisp
  (defun my-create-non-existent-directory ()
    (let ((parent-directory (file-name-directory buffer-file-name)))
      (when (and (not (file-exists-p parent-directory))
                 (y-or-n-p (format "Directory `%s' does not exist! Create it?" parent-directory)))
        (make-directory parent-directory t))))
  (add-to-list 'find-file-not-found-functions #'my-create-non-existent-directory)
#+end_src

** Find init
Finds the init file and opens it.

#+begin_src emacs-lisp
  (defun find-init-file ()
    "Edit main init file, emacs_init.org."
    (interactive)
    (find-file (expand-file-name "emacs_init.org" user-emacs-directory)))
#+end_src

** Reindent buffer
Reindents the entire buffer. Use =C-c /=.

#+begin_src emacs-lisp
  (defun indent-buffer ()
    "Indents an entire buffer using the default intenting scheme."
    (interactive)
    (save-excursion
      (delete-trailing-whitespace)
      (indent-region (point-min) (point-max) nil)
      (if indent-tabs-mode
          ;; Add more modes before/after web-mode
          (if (derived-mode-p 'web-mode)
              (untabify (point-min) (point-max))
            (tabify (point-min) (point-max)))
        (untabify (point-min) (point-max)))))

  (bind-key "/" #'indent-buffer storvik/prefix-map)
#+end_src

** Rename current file
Rename the current buffer and file. Thanks to [[http://whattheemacsd.com/][whattheemacsd]].

#+begin_src emacs-lisp
  (defun rename-current-buffer-file ()
    "Renames current buffer and file it is visiting."
    (interactive)
    (let ((name (buffer-name))
          (filename (buffer-file-name)))
      (if (not (and filename (file-exists-p filename)))
          (error "Buffer '%s' is not visiting a file!" name)
        (let ((new-name (read-file-name "New name: " filename)))
          (if (get-buffer new-name)
              (error "A buffer named '%s' already exists!" new-name)
            (rename-file filename new-name 1)
            (rename-buffer new-name)
            (set-visited-file-name new-name)
            (set-buffer-modified-p nil)
            (message "File '%s' successfully renamed to '%s'"
                     name (file-name-nondirectory new-name)))))))
#+end_src

* Daemon
Start emacs server

#+begin_src emacs-lisp
  (server-start)
#+end_src
